---
title: "Statistical summaries"
format: html
execute:
  echo: true
  messages: false
  warning: false
editor: source
---

# Descriptive statistics

The first step in nearly every data analysis is to describe the data using basic (or sophisticated) descriptive measures.

The base R package includes a family of functions that allow us to compute descriptive statistics for individual data (typically represented by a vector) or grouped data.

In this section, we will cover the main functions

## Numerical data

Using the mtcars data

```{r data}

mtcars

```

We introduce the function `summary()`

```{r summary}

summary(mtcars)

```


This function provides a set of basic statistics for each column of a data frame.

If we apply the function to a vector instead, it gives basic statistics for that vector.

```{r summary2}

summary(mtcars$mpg)

```


n a data analysis pipeline, we often need to compute individual descriptive measures. Below is a non-exhaustive list of functions that estimate basic descriptive statistics:


```{r descriptive}

mean(mtcars$mpg)      # Mean
median(mtcars$mpg)    # Median
min(mtcars$mpg)       # Minimum
max(mtcars$mpg)       # Maximum
range(mtcars$mpg)     # Minimum and maximum value
var(mtcars$mpg)       # Variance
sd(mtcars$mpg)        # Standard deviation
IQR(mtcars$mpg)       # Interquartile range
quantile(x = mtcars$mpg, probs = 0.5)        # Percentile 50
quantile(x = mtcars$mpg, probs = 0.25)       # Percentile 25
quantile(x = mtcars$mpg, probs = 0.75)       # Percentile 75
quantile(x = mtcars$mpg)                     # Quantiles
quantile(x = mtcars$mpg, probs = c(0.15, 0.68, 0.83))   # Custom quantiles

```


The `mean()` function has two additional arguments. One of them, `trim`, allows us to use just a fraction (between 0 and 0.5) of the observations. These observations are _trimmed_ from each end before the mean is computed. For example, the following code does not take into account the 10% of the greatest and lowest values:

```{r mean}

mean(mtcars$mpg, trim = 0.1)

mean(mtcars$mpg)

```

We are going to use a new dataset, `airquality`, to introduce how to handle _missing numbers_ 

```{r airquality}

head(airquality)

```

We apply the function `summary()` to the dataset

```{r airquality 2}

summary(airquality)

```

We have `NA` or missing values in two columns. As you can see, the `summary()` function helps us identify missing values in a column and provides the count of them

In R, most statistical functions do not handle missing values by default in their calculations

```{r mean2}

mean(airquality$Ozone)
median(airquality$Ozone)
sd(airquality$Ozone)

```


To address this, most statistical functions in R have an `na.rm` argument, which instructs the function to ignore `NA` values. This applies not only to the `mean()` function but also to many other functions.


```{r mean3}

mean(airquality$Ozone, na.rm = TRUE)
median(airquality$Ozone, na.rm = TRUE)
sd(airquality$Ozone, na.rm = TRUE)

```

The `mean()` function computes the arithmetic mean, but we can also compute the weighted mean using the `weighted.mean()` function. This function requires a numerical vector of weights that is the same length as the input vector, specifying the weight for each element.

```{r mean4}

set.seed(123)
vector_one <- rnorm(n = 5, mean = 10, sd = 2)
w <- runif(n = 5, min = 0, max = 0.2)

vector_one
w

mean(vector_one)
weighted.mean(x = vector_one, w = w)

```

Other way to summarize data is analysing the absolute and relative frequency, in base R, we compute both using the `table()` and `prop.table()` functions

```{r prop}

table(mtcars$cyl)
prop.table(mtcars$cyl)

```

`prop.table()` give us the relative proportion for each element of a vector, that's not the standard view we are accustomed to use. For the standard view (proportion by element class), we use as argument the output of the `table()` function.

```{r prop2}

prop.table(table(mtcars$cyl))

```

The function `cor()` quantify the correlation between two variables

```{r cor}

cor(mtcars$mpg, mtcars$hp)

```

Or for a numerical table

```{r cor2}

cor(mtcars)

```

When we have `NA` values

```{r cor3}

cor(airquality)

```

We can ignore the `NA` observations with the `use` argument

```{r cor4}

cor(airquality, use = "complete.obs")

```

## Categorical data

For categorical data there makes no sense to compute statistics such as means and standard deviations, we rather analize this data using _proportions_ 

We will use the `HMDA` dataset from Stock and WatsonÂ´s introductory econometrics textbook

```{r hmda}

library(AER)
data("HMDA", package = "AER")
head(HMDA)

```

We can construct a cross-table that shows the counts for different combinations of two categorical variables

```{r hmda2}

table(HMDA$deny, HMDA$hschool)

```

In terms of proportions

```{r hmda3}

prop.table(table(HMDA$deny, HMDA$hschool))

```

By row

```{r hmda4}

prop.table(table(HMDA$deny, HMDA$hschool), margin = 1)

```

By column

```{r hmda5}

prop.table(table(HMDA$deny, HMDA$hschool), margin = 2)

```

## (Quick) Descriptive graphical analysis

Histograms

```{r graph1}

hist(x = airquality$Temp)

```

More breakpoints

```{r graph2}

hist(x = airquality$Temp, breaks = 25) 

```

Densities

```{r graph3}

plot(density(airquality$Temp))

```

Change bandwidth

```{r graph4}

plot(density(airquality$Temp, bw = 100))

```

Change kernel

```{r graph5}

plot(density(airquality$Temp, kernel = "epanechnikov"))

```

Boxplots

```{r graph6}

boxplot(formula = mpg ~ cyl, data = mtcars)

```


Bar charts: counts

```{r graph7}

barplot(table(mtcars$cyl))

```

Bar charts: proportions

```{r graph8}

barplot(prop.table(table(mtcars$cyl)))

```

Empirical Cumulative Distribution Function: Discrete data

```{r graph9}

plot.ecdf(mtcars$hp)

```

Empirical Cumulative Distribution Function: Continuous data

```{r graph10}

data_ecdf <- rnorm(n = 10e3)

plot.ecdf(data_ecdf)

```

