---
title: "Visualization: ggplot2"
execute:
  echo: true
  messages: false
  warning: false
editor: source
---

# Introduction to Data Visualization in R with `ggplot2`

Data visualization stands as a cornerstone in the data analysis cycle, permeating its beginning, middle, and end stages.

In this module, emphasis lies on practical, hands-on code sessions over theoretical discussions, fostering an interactive learning experience.

We will delve into the visualization capabilities of the ggplot2 library within the tidyverse ecosystem, a versatile tool favored by renowned entities such as the [BBC](https://bbc.github.io/rcookbook/) and the [Financial Times](https://blog.revolutionanalytics.com/2018/06/ft-bbc-uses-r.html).


::: {#fig-ggplot}
![](images/logo5.png){width=200}

ggplot2 hex sticker
:::

::: {.callout-note}

**Bibliographical References**

For those eager to delve deeper into data visualization with ggplot2, I recommend the following resources:

+ Foundational

  - [R Graphics Cookbook](https://r-graphics.org/), 2nd edition by Winston Chang: This cookbook-style reference is invaluable for resolving both basic and advanced visualization queries.

  - [Data Visualization A practical introduction](https://socviz.co/) by Kieran Healy: Offering a comprehensive exploration beyond mere tool proficiency, this work delves into the principles of effective visualization.

+ Supplementary

  - [ggplot2: Elegant Graphics for Data Analysis (3e)](https://ggplot2-book.org/) by Hadley Wickham, Danielle Navarro, and Thomas Lin Pedersen: An essential read for understanding the philosophy underpinning ggplot2, known as the Grammar of Graphics. 
  
  - [The Grammar of Graphics](https://link.springer.com/book/10.1007/0-387-28695-0?source=post_page-----1f92b4ed4149--------------------------------)  by Leland Wilkinson: A foundational text on the principles of _The Grammar of Graphics_, highly recommended for enthusiasts of visualization.

:::

Let's proceed by installing and loading the ggplot2 library.

```{r ggplot01}

library(ggplot2)

```

We're going to use datasets provided by the ggplot2 library as examples. Let's start with `mpg`.

```{r ggplot02}

mpg

```


Similar to how language grammar organizes language using a set of rules, the grammar of graphics delineates a set of rules for structuring graphs.

At its core, the **grammar of graphics** revolves around the concept of layers. A coherent combination of layers culminates in the formation of a graph

## Layers

* _Data_: source dataset being visualized
* _Aesthetics_: links variables in the dataset to visual properties like color, size, and shape
* _Geometries_: visual representation used for the data (line, points, bars)
* _Facets_: divides the data into subsets based on one or more categorical variables (country, gender, age)
* _Statistics_: computed geometries based on statistical measures
* _Coordinates_: specifies the type of coordinate system, such as cartesian, polar, etc.
* _Themes_: appearance of plot decorations (axis, grid lines, background)

::: {#fig-layers}
![](images/gglayers.png){width=400}

Image adapted from The Grammar of Graphics. [Source](https://r.qcbs.ca/workshop03/book-en/grammar-of-graphics-gg-basics.html). 
:::

Fundamentally, every plot necessitates a dataset, a geometric representation, and aesthetic specifications.


```{r ggplot03}
#| eval: false

ggplot(data = <DATA>, mapping = aes(<MAP>)) + <GEOMETRY>(OPTIONS)

```

The Geometry refers to the type of plot (scatter, line, bar, etc.), and aesthetics describe how we map data onto the axes, essentially what we place on the axes.

The function for creating a plot is `ggplot()`.

Let's construct a plot that relates the variables `displ` and `hwy`. The first step is to call the data and specify the variables we want to represent; this latter aspect is what ggplot refers to as *aesthetics*

## Data and aesthetics

```{r ggplot035_0}

graph <- ggplot(mpg) 

graph

```

```{r ggplot035}

graph <- ggplot(mpg, aes(x = displ, y = hwy)) 

graph

```


## Geometries

We see that it represents a sort of canvas where the variables to be represented are displayed. We need a geometry *layer*. Yo can see a list of ggplot2 geometries [here](https://ggplot2.tidyverse.org/reference/#geoms)

```{r ggplot04}

graph <- ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point()

graph

```

Within aesthetics, we can incorporate additional options:

* `color`: Specifies the color of the geometry and can vary depending on a third variable if such a dependency exists

* `fill` Specifies the fill color of the geometry if it's a shape that can be filled (such as bars, points, polygons, etc.).

* `shape` Indicates the shape of the points (ordered pairs or n-tuples of the represented variables) or the lines connecting them.

* `size` Defines the size of the geometry.

* `alpha` Controls the transparency of the geometry.

We add a color to the geometry that depends on the discrete variable `class` from the dataset.

```{r ggplot05}

graph <- ggplot(mpg, aes(x = displ, y = hwy, color = class)) +
  geom_point()

graph

```

This is what we called a a _non fixed_ aesthetic, in this case it should appear as a argument if the `aes()` function.

Look at what happens if we include the `color` argument in `geom_point()`

```{r ggplot055}
#| eval: false

graph <- ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point(color = class)

graph

```

We obtain a error, let us substitute the `class` variable by a color name

```{r ggplot056}

graph <- ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point(color = "blue")

graph

```

This is what we call a _fixed aesthetic_, the color is the same for all the points.

Likewise, we can include a shape for each ordered pair that depends on another variable, in this case `cyl`. Before adding it, we convert it into a factor

```{r ggplot06}

graph <- ggplot(mpg, aes(x = displ,
                         y = hwy,
                         color = class,
                         shape = factor(cyl))
                ) +
  geom_point()

graph

```

We can modify the size of the aesthetics

```{r ggplot065}

graph <- ggplot(mpg, aes(x = displ, y = hwy, color = class, shape = factor(cyl))) +
  geom_point(size = 3)

graph

```

Honestly, this chart introduces more confusion than it resolves. Letâ€™s simplify our approach by returning to the basic version, and we will select the shape of the aesthetic elements using the `shape` attribute. Each shape option is assigned a specific number, which you can reference [here](https://ggplot2.tidyverse.org/articles/ggplot2-specs.html#point)

```{r ggplot07}

graph <- ggplot(mpg, aes(x = displ, y = hwy, color = factor(cyl))) +
  geom_point(size = 3, shape = 23)

graph

```

Let's stick with slightly larger circles

```{r ggplot08}

graph <- ggplot(mpg, aes(x = displ, y = hwy, color = factor(cyl))) +
  geom_point(size = 4, shape = 21)

graph

```

We are going to exclude cars with 5 cylinders (as there are very few), and this way we see how we can manipulate the dataset within the plot instructions.

```{r ggplot09}
# #| class-source: "numberLines"
# #| source-line-numbers: "1"

graph <- ggplot(mpg |> dplyr::filter(cyl != 5),
                  aes(x = displ, y = hwy, color = factor(cyl))) +
  geom_point(size = 4, shape = 21)

graph

```

Changing the geom, bar graph

```{r ggplot092}

graph <- ggplot(mpg, aes(x = cyl, fill = factor(class))) +
  geom_bar()

graph

```

```{r ggplot0925}

graph <- ggplot(mpg, aes(x = cyl, fill = factor(class))) +
  geom_bar() +
  coord_flip()

graph

```

```{r ggplot0926}

graph <- ggplot(mpg, aes(x = cyl, fill = factor(class))) +
  geom_bar(position = "dodge")

graph

```

```{r ggplot0927}

graph <- ggplot(mpg, aes(x = class, fill = factor(cyl))) +
  geom_bar(position = "fill") +
  labs(y = "Proportion")

graph

```

We will explore a different dataset that is well-suited for creating line graphs, the `economics` dataset

```{r ggplotecon}

economics


```

Line graph

```{r ggplot082}

graph <- ggplot(economics, aes(x = date, y = unemploy)) +
  geom_line()

graph

```

```{r ggplot083}

graph <- ggplot(economics, aes(x = date, y = unemploy)) +
  geom_line(color = "blue", size = 1.2)

graph

```

```{r ggplot084}

graph <- ggplot(economics, aes(x = date, y = unemploy)) +
  geom_line(color = "blue", size = 1.2, linetype = "dashed")

graph

```

Different line types

```{r ggplot0845}

ggplot(economics_long, aes(date, value01)) +
  geom_line(aes(linetype = variable))

```


```{r ggplot085}

graph <- ggplot(economics, aes(x = date, y = unemploy)) +
  geom_line() +
  geom_area(fill="lightblue", color="black")

graph

```


Histograms

```{r ggplot14}
#| warning: false

graph_h <- ggplot(mpg, aes(x = cty)) +
  geom_histogram()

graph_h

```

Not that nice, let us change the default parameters, the bindwith

```{r ggplot15}
#| warning: false

graph_h <- ggplot(mpg, aes(x = cty)) +
  geom_histogram(binwidth = 3)

graph_h

```

Or the number of bins

```{r ggplot152}
#| warning: false

graph_h <- ggplot(mpg, aes(x = cty)) +
  geom_histogram(bins = 8)

graph_h

```

Or use some colours

```{r ggplot16}
#| warning: false

graph_h <- ggplot(mpg, aes(x = cty)) +
  geom_histogram(binwidth = 3, fill = "blue", color = "black")

graph_h

```


A boxplot

```{r ggplot17}
#| warning: false

graph_b <- ggplot(mpg, aes(x =factor(class), y = hwy)) +
  geom_boxplot()

graph_b

```

Change the color

```{r ggplot172}
#| warning: false

graph_b <- ggplot(mpg, aes(x =factor(class), y = hwy)) +
  geom_boxplot(color= "black", fill = "cornsilk")

graph_b

```

```{r ggplot173}
#| warning: false

graph_b <- ggplot(mpg, aes(x =factor(class), y = hwy, fill = factor(class) )) +
  geom_boxplot()

graph_b

```

We can also compare distributions using densities

```{r ggpplot1745}

ggplot(mpg |> dplyr::filter(cyl != 5),
       aes(x = hwy)
       ) +
  geom_density(alpha = 0.4) +
  facet_grid(~ cyl)

```


```{r ggpplot174}

ggplot(mpg |> dplyr::filter(cyl != 5),
       aes(x = hwy, fill = factor(cyl))
       ) +
  geom_density(alpha = 0.4) 

```

Another way to represent densities is by using a _joyplot_, which can be created with the `ggridges` library. A joyplot is a type of plot that displays multiple density plots stacked on top of each other, making it easier to compare the distributions of different groups or categories. 

```{r ggpplot175}

library(ggridges)

ggplot(mpg, 
       aes(x = hwy, y = class, fill = class)) +
  geom_density_ridges() + 
  theme_ridges()

```


## Facets

It may not be easy to view everything on a single graph, in this case we can create a sub plot for each categorical variable. In such cases, we can define facets with `facet_wrap()`.

```{r ggplot12}
#| warning: false

graph <- ggplot(mpg |> dplyr::filter(cyl != 5),
                  aes(x = displ, y = hwy, color = factor(cyl))) +
  geom_point(size = 4, shape = 21) +
  facet_wrap( ~ cyl)

graph

```

You can also facet by two categorical variables using `facet_grid()`

```{r ggplot13}
#| warning: false

graph <- ggplot(mpg |> dplyr::filter(cyl != 5),
                  aes(x = displ, y = hwy, color = factor(manufacturer))) +
  geom_point(size = 4, shape = 21) +
  facet_grid(class ~ cyl)

graph

```

```{r ggplot17f}
#| warning: false

graph_b <- ggplot(mpg, aes(x =factor(class), y = hwy)) +
  geom_boxplot(color= "black", fill = "cornsilk")+
  facet_wrap(~year)

graph_b

```

## Statistics

Now, letâ€™s estimate a linear relationship between the variables `hwy` and `disp` by cylinders.

```{r ggplot10}
#| warning: false

graph <- ggplot(mpg |> dplyr::filter(cyl != 5),
                  aes(x = displ, y = hwy, color = factor(cyl))) +
  geom_point(size = 4, shape = 21) +
  geom_smooth(method = lm)

graph

```

We have the ability to adjust the appearance of the smoothing functions. For instance, we can remove the confidence interval and change the line thickness.

```{r ggplot105}
#| warning: false

graph <- ggplot(mpg |> dplyr::filter(cyl != 5),
                  aes(x = displ, y = hwy, color = factor(cyl))) +
  geom_point(size = 4, shape = 21) +
  geom_smooth(method = lm, se = FALSE, size = 3)

graph

```

And if we want the relationship to be non-linear, we do not specify the method (non-linear is the default)

```{r ggplot11}
#| warning: false

graph <- ggplot(mpg |> dplyr::filter(cyl != 5),
                  aes(x = displ, y = hwy, color = factor(cyl))) +
  geom_point(size = 4, shape = 21) +
  geom_smooth()

graph

```

A simpler non-linear version

```{r ggplot18}

graph <- ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point(colour = "blue", size = 2) +  
  geom_smooth(method = "lm", formula = y ~ poly(x, 2), color = "red")

graph 

```


## Themes

The `theme()` function in `ggplot2` allows you to customize the non-data components of your plots, such as axes, labels, backgrounds, and more.

When you execute `?theme`, you'll notice there are numerous elements within a plot that can be modified. Before diving into a selection of these customizable elements, we'll first explore the theme functions that offer predefined theme settings for specific styles.

### Default: Grey

```{r themes1}

graph +
  theme_gray()

```

### Theme BW

```{r themes2}

graph +
  theme_bw()

```

### Theme dark

```{r themes3}

graph +
  theme_dark()

```

### Theme minimal

```{r themes4}

graph +
  theme_minimal()

```

### Theme classic

```{r themes5}

graph +
  theme_classic()

```

### Theme Light

```{r themes6}

graph +
  theme_light()

```

### ggthemes

The `ggthemes` package provides additional themes that extend the customization options in `ggplot2`, allowing you to apply a variety of predefined styles to your plots.

```{r themes7}

library(ggthemes)

graph +
  theme_economist()

```

```{r themes8}

graph +
  theme_fivethirtyeight()

```

 
```{r themes9}

graph +
  theme_stata()

```

Before we dive deeper into the `theme` function, letâ€™s first add informative labels to our graph, such as a title, axis labels, and other relevant annotations.

```{r themes10}

graph <- graph +
  labs(title = "My First Plot",
       subtitle = "With ggplot",
       caption = "Source: Me") +
  xlab("Engine displacement") +
  ylab("Highway miles per gallon")

graph

```

[Here](https://ggplot2.tidyverse.org/reference/theme.html), you can find a comprehensive list of theme elements available in `ggplot2`. The following figure illustrates and helps you identify some of these key elements in a plot.

::: {#fig-themes}
![](images/themes.png){width=90%}

ggplot2 Theme Elements Reference Sheet ([source](https://isabella-b.com/blog/ggplot2-theme-elements-reference/))

:::


Using the figure as a guideline, let's proceed to modify some of the plot elements to see how they impact the overall appearance of the graph.

This is our base plot

```{r themes11}

graph <- graph +
  theme_minimal()

graph

```

We'll start by customizing the plot title. To do this, we'll refer to the `theme()` function documentation to understand how to structure the arguments correctly. This will help us control the appearance of the title, such as its font size, color, alignment, and position on the plot.


```{r themes115}

graph +
  theme(plot.title = element_text(hjust = 0.5, family = "serif", size = 20, colour = "brown"))

```

Axis labels

```{r themes12}

graph +
  theme(plot.title = element_text(hjust = 0.5, family = "serif", size = 20, colour = "brown")) +
  theme(axis.title.x = element_text(size = 15, colour = "purple", family = "mono"))

```

If we want to modify both axis labels

```{r themes13}

graph +
  theme(plot.title = element_text(hjust = 0.5, family = "serif", size = 20, colour = "brown")) +
  theme(axis.title = element_text(size = 15, colour = "purple", family = "mono"))

```

The background

```{r themes14}

graph +
  theme(plot.title = element_text(hjust = 0.5, family = "serif", size = 20, colour = "brown")) +
  theme(axis.title = element_text(size = 15, colour = "purple", family = "mono")) +
  theme(plot.background = element_rect(fill = "lightsalmon1"))

```

We add an axis

```{r themes15}

graph +
  theme(plot.title = element_text(hjust = 0.5, family = "serif", size = 20, colour = "brown")) +
  theme(axis.title = element_text(size = 15, colour = "purple", family = "mono")) +
  theme(plot.background = element_rect(fill = "lightsalmon1")) +
  theme(axis.line = element_line())

```

Format axis text

```{r themes16}

graph +
  theme(plot.title = element_text(hjust = 0.5, family = "serif", size = 20, colour = "brown")) +
  theme(axis.title = element_text(size = 15, colour = "purple", family = "mono")) +
  theme(plot.background = element_rect(fill = "lightsalmon1")) +
  theme(axis.line = element_line()) +
  theme(axis.text = element_text(face = "bold.italic"))

```

No grid lines

```{r themes17}

graph +
  theme(plot.title = element_text(hjust = 0.5, family = "serif", size = 20, colour = "brown")) +
  theme(axis.title = element_text(size = 15, colour = "purple", family = "mono")) +
  theme(plot.background = element_rect(fill = "lightsalmon1")) +
  theme(axis.line = element_line()) +
  theme(axis.text = element_text(face = "bold.italic")) +
  theme(panel.grid = element_blank())

```

Custom grid lines

```{r themes18}

graph +
  theme(plot.title = element_text(hjust = 0.5, family = "serif", size = 20, colour = "brown")) +
  theme(axis.title = element_text(size = 15, colour = "purple", family = "mono")) +
  theme(plot.background = element_rect(fill = "lightsalmon1")) +
  theme(axis.line = element_line()) +
  theme(axis.text = element_text(face = "bold.italic")) +
  theme(panel.grid = element_blank()) +
  theme(panel.grid.major.x = element_line(colour = "yellow", linetype = "dashed")) 

```

```{r themes19}

graph +
  theme(plot.title = element_text(hjust = 0.5, family = "serif", size = 20, colour = "brown")) +
  theme(axis.title = element_text(size = 15, colour = "purple", family = "mono")) +
  theme(plot.background = element_rect(fill = "lightsalmon1")) +
  theme(axis.line = element_line()) +
  theme(axis.text = element_text(face = "bold.italic")) +
  theme(panel.grid = element_blank()) +
  theme(panel.grid.major.x = element_line(colour = "yellow", linetype = "dashed")) +
  theme(panel.grid.minor.x = element_line(colour = "black", linetype = "solid"))

```

```{r themes20}

graph +
  theme(plot.title = element_text(hjust = 0.5, family = "serif", size = 20, colour = "brown")) +
  theme(axis.title = element_text(size = 15, colour = "purple", family = "mono")) +
  theme(plot.background = element_rect(fill = "lightsalmon1")) +
  theme(axis.line = element_line()) +
  theme(axis.text = element_text(face = "bold.italic")) +
  theme(panel.grid = element_blank()) +
  theme(panel.grid.major.x = element_line(colour = "yellow", linetype = "dashed")) +
  theme(panel.grid.minor.x = element_line(colour = "black", linetype = "solid")) +
  theme(panel.grid.major.y = element_line(colour = "green", linetype = "dashed")) +
  theme(panel.grid.minor.y = element_line(colour = "black", linetype = "solid"))


```

Change the panel background

```{r themes21}

graph +
  theme(plot.title = element_text(hjust = 0.5, family = "serif", size = 20, colour = "brown")) +
  theme(axis.title = element_text(size = 15, colour = "purple", family = "mono")) +
  theme(plot.background = element_rect(fill = "lightsalmon1")) +
  theme(axis.line = element_line()) +
  theme(axis.text = element_text(face = "bold.italic")) +
  theme(panel.grid = element_blank()) +
  theme(panel.grid.major.x = element_line(colour = "yellow", linetype = "dashed")) +
  theme(panel.grid.minor.x = element_line(colour = "black", linetype = "solid")) +
  theme(panel.grid.major.y = element_line(colour = "green", linetype = "dashed")) +
  theme(panel.grid.minor.y = element_line(colour = "black", linetype = "solid")) +
  theme(panel.background = element_rect(fill = "bisque"))


```


Finally, we can save our graph using the function `ggsave()`. You can choose the format of the output file

By default, the `ggsave()` function saves the last graph

```{r save1}
#| warning: false
#| eval: false

ggsave(filename = "myPlot.pdf", device = "pdf")

```

The `device` argument controls the output file type

```{r save2}
#| warning: false
#| eval: false

ggsave(filename = "myPlot.jpeg", device = "jpeg")

```


## Maps

Maps are highly valuable for representing data associated with geographical locations, particularly with the emergence of high-frequency data (such as mobile phone interactions, card payments, etc.)

To plot a map, you require position information that links each observation to a specific location. This position can be represented as latitude and longitude (coordinate reference systems), special features (geometries), or raster data (regular rectangular grids)^[A good reference for this concepts in R is this [book](https://www.paulamoraga.com/book-spatial/spatial-data-in-r.html)]

### Coordinate Reference Systems

For the following example, we will load the `maps` library

The `maps` package in R provides a collection of geographical maps that can be utilized for visualizing data. This includes maps of various countries, states, and regions around the world

```{r maps1}

library(maps)

usa <- map_data("state")

head(usa)

```

The `map_data()` function converts the raw data into a data frame that can be read by ggplot.

When checking the columns of the `usa` data frame, all are self-explanatory except for _order_ and _group_

The _order_ column indicates the order in which ggplot should connect the dots

The _group_ column defines which adjacent points should be connected by lines. It is essential to always include this column in the group argument of the corresponding geometry in ggplot

We plot the data using `ggplot` with the polygon geometry

```{r maps2}

ggplot() +
  geom_polygon(data = usa,
               mapping = aes(x = long, y = lat, group=group), #Always include group!
               color="black",
               fill="lightblue")

```
Once we have geographic data, we typically want to associate this data with a statistic or numerical characteristic that corresponds to each region/observation

Let's use an R dataset that records the number of arrests per 100,000 residents for assault, murder, and rape in each of the 50 US states in 1973

```{r maps3}

head(USArrests)

```

We will create a new column that contains the state names of the data frame row names. Once we add the column, we will join this dataset with our map data frame

```{r maps4}

library(dplyr)
library(purrr)

USArrests$region <- tolower(rownames(USArrests))

usa2 <- left_join(x = usa, y = USArrests, by = "region")

head(usa2)

```

We will repeat the same procedure, adding a `fill` argument in the geometry aesthetic to represent the arrests data in the map

```{r maps5}

ggplot() +
  geom_polygon(data = usa2,
               mapping = aes(x = long, y = lat, group=group, fill = Assault),
               color="black")


```

We can also utilize the `geom_map` geometry from `ggplot`, eliminating the need for merging the two datasets

```{r maps6}

ggplot(USArrests, aes(map_id = region)) + # column region from the map dataframe
  geom_map(aes(fill = Assault), # variable we want to represent from the arrests dataframe
           map = usa) + # data frame that contains coordinates
  expand_limits(x = usa$long, y = usa$lat) +
  coord_map() 

```

### Simple Features

We will introduce the [`sf` library](https://r-spatial.github.io/sf/) for working with spatial data

We are going to download data in sf format from Eurostat using the `eurostat` library

Now let's load the necessary libraries

```{r maps7}
#| message: false
#| warning: false

library(sf)
library(giscoR)
library(eurostat)
library(dplyr)

```

We will download data from Eurostat

```{r maps8}
#| message: false 

#proxy setups
Sys.setenv("no_proxy"=".jrc.org,.jrc.cec.eu.int,.jrc.ec.europa.eu,.jrc.it,.jrc.es,localhost,127.0.0.1")

eur21 <- get_eurostat_geospatial(resolution = 10,
                                 nuts_level = 2,
                                 year = 2021)

head(eur21)

```

Next, we will plot the data using the geometry `geom_sf` to visualize it

```{r maps9}

ggplot(data = eur21) +
  geom_sf()

```

Let's create a map of Italy

```{r maps10}

ggplot(data = eur21 |> filter(CNTR_CODE == "IT")) +
  geom_sf()

```

As mentioned in the previous example, we will associate geographical locations with numerical data. Specifically, we will download unemployment data at the NUTS2 level


```{r maps11}
#| message: false

unemp <- get_eurostat(id = "tgs00010", select_time = "Y")

head(unemp)

Sys.setenv("no_proxy"=".ec.europa.eu,.jrc.org,.jrc.cec.eu.int,.jrc.ec.europa.eu,.jrc.it,.jrc.es,localhost,127.0.0.1")
```

We will then filter the unemployment rate for all genders and education levels for the year 2021

```{r maps12}

unemp |> 
  filter(TIME_PERIOD == "2021-01-01" & sex == "T" & isced11 == "TOTAL") |> 
  head()

```

After that, we will merge the unemployment data with the geolocation data for Italy only

```{r maps13}

eur21_2 <- inner_join(x = eur21 |> filter(CNTR_CODE == "IT"),
                      y = unemp |> filter(TIME_PERIOD == "2021-01-01" & sex == "T" & isced11 == "TOTAL"),
                      by = c("NUTS_ID" = "geo")) %>% 
  st_as_sf() #convert to sf object

head(eur21_2)

```

Finally, we will generate a map representing the unemployment rate at the NUT2 level in Italy

```{r maps14}

eur21_2 %>% 
  dplyr::filter(CNTR_CODE == "IT") %>% 
  ggplot(aes(fill = values)) +
  geom_sf()


```

Let's customize the plot

We will remove the axis text

```{r maps15}

eur21_2 %>%
  dplyr::filter(CNTR_CODE == "IT") %>% 
  ggplot(aes(fill = values)) +
  geom_sf() +
  theme(axis.text = element_blank())

```

We will remove the axis ticks

```{r maps16}

eur21_2 %>%
  dplyr::filter(CNTR_CODE == "IT") %>% 
  ggplot(aes(fill = values)) +
  geom_sf() +
  theme(axis.text = element_blank()) +
  theme(axis.ticks = element_blank())

```

We will change the color scale

```{r maps17}

eur21_2 %>%
  dplyr::filter(CNTR_CODE == "IT") %>% 
  ggplot(aes(fill = values)) +
  geom_sf() +
  theme(axis.text = element_blank()) +
  theme(axis.ticks = element_blank()) +
  scale_fill_continuous(type = "viridis")

```

We will add an informative title to the legend

```{r maps18}

eur21_2 %>%
  dplyr::filter(CNTR_CODE == "IT") %>% 
  ggplot(aes(fill = values)) +
  geom_sf() +
  theme(axis.text = element_blank()) +
  theme(axis.ticks = element_blank()) +
  scale_fill_continuous(type = "viridis", name = "Unemployment (%)")


```

We can customize the color scale with `scale_fill_gradient()`

```{r maps19}

eur21_2 %>%
  dplyr::filter(CNTR_CODE == "IT") %>% 
  ggplot(aes(fill = values)) +
  geom_sf() +
  theme(axis.text = element_blank()) +
  theme(axis.ticks = element_blank()) +
  scale_fill_gradient(low = "yellow", high = "red", name = "Unemployment (%)")


```

With `scale_fill_gradient2()` we can add a mid point in the color scale

```{r maps20}

eur21_2 %>%
  dplyr::filter(CNTR_CODE == "IT") %>% 
  ggplot(aes(fill = values)) +
  geom_sf() +
  theme(axis.text = element_blank()) +
  theme(axis.ticks = element_blank()) +
  scale_fill_gradient2(low = "yellow", high = "red",mid = "orange", name = "Unemployment (%)")

```

We can also add a numerical value for the scale mid point

```{r maps21}

eur21_2 %>%
  dplyr::filter(CNTR_CODE == "IT") %>% 
  ggplot(aes(fill = values)) +
  geom_sf() +
  theme(axis.text = element_blank()) +
  theme(axis.ticks = element_blank()) +
  scale_fill_gradient2(low = "yellow",
                       high = "red",
                       mid = "orange",
                       midpoint = 12,
                       name = "Unemployment (%)")

```

If we want to choose a number that represents the mid point more accurately, we can check the maximum level of unemployment

```{r maps22}

eur21_2 %>%
  dplyr::filter(CNTR_CODE == "IT") %>% 
  select(values) %>% 
  summarise(max(values))

```

With a maximum value of 19.3 and a minimum value around 4, we can choose a number around 8

```{r maps23}

eur21_2 %>%
  dplyr::filter(CNTR_CODE == "IT") %>% 
  ggplot(aes(fill = values)) +
  geom_sf() +
  theme(axis.text = element_blank()) +
  theme(axis.ticks = element_blank()) +
  scale_fill_gradient2(low = "yellow",
                       high = "red",
                       mid = "orange",
                       midpoint = 8,
                       name = "Unemployment (%)")


```

We add value labels with `geom_sf_text()`

```{r maps24}
#| warning: false

eur21_2 %>%
  dplyr::filter(CNTR_CODE == "IT") %>% 
  ggplot(aes(fill = values)) +
  geom_sf() +
  theme(axis.text = element_blank()) +
  theme(axis.ticks = element_blank()) +
  scale_fill_gradient2(low = "yellow",
                       high = "red",
                       mid = "orange",
                       midpoint = 10,
                       name = "Unemployment (%)") +
  geom_sf_text(aes(label = values))

```

We would like to add labels that indicate the region name

```{r maps25}
#| warning: false

eur21_2 %>%
  dplyr::filter(CNTR_CODE == "IT") %>% 
  ggplot(aes(fill = values)) +
  geom_sf() +
  theme(axis.text = element_blank()) +
  theme(axis.ticks = element_blank()) +
  scale_fill_gradient2(low = "yellow",
                       high = "red",
                       mid = "orange",
                       midpoint = 10,
                       name = "Unemployment (%)") +
  geom_sf_text(aes(label = NAME_LATN))


```

The labels overlap each other, so we can change the font size in `geom_sf_text()`

```{r maps26}
#| warning: false

eur21_2 %>%
  dplyr::filter(CNTR_CODE == "IT") %>% 
  ggplot(aes(fill = values)) +
  geom_sf() +
  theme(axis.text = element_blank()) +
  theme(axis.ticks = element_blank()) +
  scale_fill_gradient2(low = "yellow",
                       high = "red",
                       mid = "orange",
                       midpoint = 10,
                       name = "Unemployment (%)") +
  geom_sf_text(aes(label = NAME_LATN), size =2)


```

Well, not an improvement. The library [`ggrepel`](https://ggrepel.slowkow.com/) deals with overlapping labels

```{r maps27}
#| warning: false

library(ggrepel)

eur21_2 %>%
  dplyr::filter(CNTR_CODE == "IT") %>% 
  ggplot(aes(fill = values, label= NAME_LATN)) + #Notice we include the label here
  geom_sf() +
  theme(axis.text = element_blank()) +
  theme(axis.ticks = element_blank()) +
  scale_fill_gradient2(low = "yellow",
                       high = "red",
                       mid = "orange",
                       midpoint = 10,
                       name = "Unemployment (%)") +
  geom_text_repel(aes(geometry = geometry), stat = "sf_coordinates") #include geometry and stat


```

We can control the overlap and distance between labels

```{r maps28}
#| warning: false

eur21_2 %>%
  dplyr::filter(CNTR_CODE == "IT") %>% 
  ggplot(aes(fill = values, label= NAME_LATN)) +
  geom_sf() +
  theme(axis.text = element_blank()) +
  theme(axis.ticks = element_blank()) +
  scale_fill_gradient2(low = "yellow",
                       high = "red",
                       mid = "orange",
                       midpoint = 10,
                       name = "Unemployment (%)") +
  geom_text_repel(aes(geometry = geometry),
                  stat = "sf_coordinates",
                  max.overlaps = Inf,
                  box.padding = 0.5)


```

We can further improve by adjusting the label size 

```{r maps29}
#| warning: false

eur21_2 %>%
  dplyr::filter(CNTR_CODE == "IT") %>% 
  ggplot(aes(fill = values, label= NAME_LATN)) +
  geom_sf() +
  theme(axis.text = element_blank()) +
  theme(axis.ticks = element_blank()) +
  scale_fill_gradient2(low = "yellow",
                       high = "red",
                       mid = "orange",
                       midpoint = 10,
                       name = "Unemployment (%)") +
  geom_text_repel(aes(geometry = geometry),
                  stat = "sf_coordinates",
                  max.overlaps = Inf,
                  box.padding = 0.5, size =4)


```
