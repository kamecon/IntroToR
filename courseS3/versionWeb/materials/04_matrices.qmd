---
title: "Matrices"
format: html
execute:
  echo: true
  messages: false
  warning: false
editor: source
---

# Matrices

So far we have been working with a one-dimensional data structure, but in data analysis we are sometimes interested in *discovering* or finding relationships between variables, so it is necessary to look at them as a whole in order to capture interrelationships.

This forces us to have to work in more than one dimension, in R we can do that with **matrices** and **arrays**.

A matrix is nothing more than a two-dimensional structure that allows us to store homogeneous data. To construct a matrix we use the `matrix()` function

```{r matrices}

vector_6 <- seq(8)

vector_6

A <- matrix(vector_6)

A


```

We have a one-column vector. What if we want more than one dimension?

```{r matrix2}

A <- matrix(vector_6, nrow = 2)

A


```

```{r matrices3}

A <- matrix(vector_6, ncol = 2)

A

```


```{r matrices4}

A <- matrix(vector_6, nrow = 4, ncol = 2)

A

```


We notice that the matrix is *filled* by columns, we can change that behaviour

```{r matrices5}

A <- matrix(vector_6, nrow = 4, ncol = 2, byrow = TRUE)

A

```

Just as we had the name attribute for vectors, we can also name the rows and columns of a matrix. To inspect the row names of a matrix we use `rownames()`, and the row names `colnames()`.


```{r arrays6}

rownames(A)
colnames(A)

```


NULL indicates when an expression or function results in an undefined value. In this case it indicates that the array has no names. Let's assign names to it by associating a vector of characters

```{r arrays7}

rownames(A) <- c("row_1", "row_2", "row_3", "row_4")
colnames(A) <- c("column_1", "column_2")

rownames(A)
colnames(A)

A

```

``dimnames()` is another way to inspect/assign the names of an array. 

```{r arrays8}

dimnames(A)

```

Is there anything strange about this structure? There are *lists*, a topic that we will not be covered in this course.

Accessing the elements of an array is very similar to the case of vectors, we just need to differentiate between dimensions with a comma `,`.

```{r arrays9}

A

A[1,1]

A[3,2]

A["row_2", "column_2"]

A[1:2, 1]

A[c("row_1", "row_4"), 2]

```

One operation that is widely used in practice is to create a new *table* from another by binding rows and columns. This is done with the `rbind()` and `cbind()` functions.

If we want to add columns based on another matrix:


```{r matriz41}

set.seed(125)

matrix_A <- matrix(data = runif(n = 8, min = 10, max = 50), nrow = 2, ncol = 4)

matrix_B <- matrix(data = runif(n = 2, min = 10, max = 50), nrow = 2, ncol = 1)

matrix_A

matrix_B

```

We combine both matrices

```{r matriz42}

matrix_AB <- cbind(matrix_A, matrix_B)

matrix_AB

```


If we want to add rows based on another matrix:

```{r matriz51}

matrix_C <- matrix(data = runif(n = 5, min = 10, max = 50), nrow = 1, ncol = 5)

matrix_C

matrix_ABC <- rbind(matrix_AB, matrix_C)

matrix_ABC

```

As mentioned before, matrices are objects that can be manipulated as matrices in the sense of linear algebra. For example, we can calculate the transpose or the inverse of a matrix

Transpose

```{r matrix6}

A

t(A)

```

Inverse

```{r matrix6_5}

A

solve(A[1:2,1:2])

```

Diagonal

```{r matrix7}

vector_diagonal <- c(1,2,3,4)

diag(vector_diagonal)

```

In this case

```{r matrix8}

diag(4)

```

The `diag(n)` command generates a square diagonal matrix of ones whit dimension n

The `%*%` operator performs products of matrices, as we will see in the practical examples

::: {.callout-tip}

## Example: Linear regression

Let's calculate the estimated coefficients of a simple linear regression using the analytical solution to the problem of minimizing the sum of squared residuals $\sum_{i=1}^n(y_i - \hat{y}_i)^2$

```{r matriz7}

#install.packages("wooldridge")
library(wooldridge)

data(gpa1)

#Sample size and number of regressors.

n <- nrow(gpa1)
k <- 2


#We extract the independent variable. $y$


y <- gpa1$colGPA


#We construct the matrix of regressors $X$ (in this case, 2) and add a column of ones


X <- cbind(1, gpa1$hsGPA, gpa1$ACT)


```

We estimate the betas using the expression:

$$\hat{\beta}=(X'X)^{-1}X'y$$

```{r matriz8}

beta_hat <- solve( t(X)%*%X ) %*% t(X)%*%y 
beta_hat


```


:::

The `solve` command inverts the matrix, the `t()` function transposes a matrix, and the `%*%` operator performs matrix multiplication, so `solve(t(X) %*% X)` executes the operation. $(X'X)^{-1}$


::: {.callout-tip title="Linear algebra functions"}

Use the help to determine what the following linear algebra functions do

`det()`, `svd()`, `eigen()`, `qr()`, `chol()`

:::
