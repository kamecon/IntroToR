---
title: "R b치sicos"
format: html
execute:
  echo: true
  messages: false
  warning: false
editor: source
---

# Entorno de trabajo: funcionamiento b치sico

A continuaci칩n, vamos a introducir manejos b치sicos del entorno de trabajo, tales como definir variables, realizar comentarios al c칩digo, etc. En este proceso, iremos introduciendo conceptos del lenguaje que iremos definiendo de manera formal m치s adelante

## Operaciones aritm칠ticas

Para introducirnos al uso del editor y de la linea de comandos de Rstudio, empezaremos con unas operaciones muy b치sica

```{r operaciones}

2 + 2

5 - 3

3 * 2

6 / 3

```

Es posible aplicar reglas de asociaci칩n est치ndar as칤 como operaciones m치s all치 de las b치sicas (potencia, logaritmo, etc.)

```{r operaciones 2}

(5 + 3) / 4

3^2

log(100, base = 10)

5 %% 3

sqrt(9)


```

## Asignaci칩n de variables

Podemos guardar *valores* asignandoles un nombre, de modo que podamos acceder a dicho valor posteriormente

```{r asigna}

x <- 4

x

y <- (5 + 3) / 4

y

```

Se crean variables, o crean nuevos *objetos* (puede que volvamos a esto luego) con el operador `<-`. Tambi칠n se puede hacer de la manera m치s convencional con `=`. Cuando expliquemos como crear funciones, justificaremos el uso de la pr치ctica habitual.

```{r}

Numero_de_empleados <- 150

Numero_de_empleados

```

Con los nombres hay que respetar ciertas convenciones: deben comenzar con una letra y solo pueden contener letras, n칰meros, `_` y `.`

Se es libre de nombrar las variables como uno prefiera, pero existen unas reglas de estilo, como por ejemplo

```{r}
#| eval: false

i_use_snake_case
otherPeopleUseCamelCase
some.people.use.periods
Lo_queMeSale.de.por_AHI

```

::: {#fig-elephant}
[![](https://cdn.myportfolio.com/45214904-6a61-4e23-98d6-b140f8654a40/dbb99049-2916-4bc8-824f-1816f5c4f06d_rw_1920.png?h=f0b45a30ba31ad414562d1085cd6c172)](https://allisonhorst.com/everything-else)

Una ilustraci칩n de los estilos con que nombrar variables hecho por la gran [Allison Horst](https://allisonhorst.com/allison-horst). La fuente es [esta](https://allisonhorst.com/everything-else). 
:::

En caso de que lleguemos a hablar algo de POO, les dir칠 porque puede ser mala idea nombrar objetos con puntos

```{r}
Nuevos_analistas_enero <- 5

Nuevos_analistas_febrero <- 3

Analistas <- Nuevos_analistas_enero + Nuevos_analistas_febrero

Analistas

```

## Introducir comentarios

Se inician los comentarios con \#

```{r}

#Calculo del numero de analistas
Analistas <- Nuevos_analistas_enero + Nuevos_analistas_febrero

Analistas

```

## Errores

Discutiremos acerca de los errores de manera detallada m치s adelante, pero vale la pena irse acostumbrando a los mismos, ya que nos acompa침aran siempre 游땩

```{r}
#| eval: false

#Calculo del numero de analistas
Analistas_update <- Nuevos_analistas_enero + Nuevos_analistas_febrero + Nuevos_analistas_marzo

Analistas_update

```

# Librer칤as

Las librer칤as o paquetes puede que sean los elementos de mayor uso en R para el trabajo pr치ctico.

Una definici칩n formal de una librer칤a sacada del libro R Packages de Hadley Wickham y Jennifer Bryan es la siguiente:

"*En R, la unidad fundamental de c칩digo compartible es el paquete. Un paquete agrupa c칩digo, datos, documentaci칩n y pruebas, y es f치cil de compartir con otros. En marzo de 2023, hab칤a m치s de 19.000 paquetes disponibles en Comprehensive R Archive Network, o CRAN, el centro p칰blico de intercambio de paquetes de R.*"

Un paquete de R es una manera de compartir c칩digo de una manera organizada y que expanden las posibilidades de R extendiendo las funcionalidades del mismo

Las librer칤as se instalan usando el comando `install.packages()`, y se cargan las librer칤as con `library()`

```{r libreria}
#| eval: false

install.packages(emoji)
library(emoji)


```
