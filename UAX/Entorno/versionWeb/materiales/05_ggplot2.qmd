---
title: "ggplot2"
format: html
execute:
  echo: true
  messages: false
  warning: false
editor: source
---

# Introducción a la visualización en R con `ggplot2`

La visualización de datos es un tópico independiente al que habría que dedicarle un cuatrimestre o incluso un curso entero.

Es un elemento fundamental en el ciclo del análisis de datos, que ocupa un sitio tanto al principio, durante y al final del mismo.

Dada la naturaleza práctica e interactiva de este módulo, el mismo se basará más en sesiones de código que en discusiones de naturaleza teórica,

Abarcaremos las funcionalidades de visualización de la librería `ggplot2` del ecosistema tidyverse.

ggplot2 ha sido usado por medios como la [BBC](https://bbc.github.io/rcookbook/) y el [Financial Times](https://blog.revolutionanalytics.com/2018/06/ft-bbc-uses-r.html)

::: {#fig-datatble}
![](images/logo5.png){width=200}

Hex sticker de ggplot2
:::

::: {.callout-note}

**Referencias bibliográficas**

Como se ha mencionado, en este curso veremos una (extremadamente) breve introducción a visualización con ggplot2. así que, a los interesados en profundizar en el tema les recomiendo la siguiente bibliografía:

+ Básica

  - [R Graphics Cookbook](https://r-graphics.org/), 2nd edition de Winston Chang. Es un libro de referencia en forma de recetario que es muy útil a la hora de intentar resolver dudas básicas (y no tanto) muy concretas.

  - [Data Visualization A practical introduction](https://socviz.co/) de Kieran Healy. Es una obra más extensa pero muy recomendable que va más allá del mero aprendizaje de una librería y trata los elementos de una buena visualización.

+ Complementaria

  - [ggplot2: Elegant Graphics for Data Analysis (3e)](https://ggplot2-book.org/) de  Hadley Wickham, Danielle Navarro, y Thomas Lin Pedersen. Este “es” el libro si desea aprender no el uso práctico de la librería ggplot2, sino la filosofía de la Gramática de Gráficos detrás de la librería. No será una referencia para este curso, pero es una cita obligatoria en cualquier curso que use ggplot2
  
  - [The Grammar of Graphics](https://link.springer.com/book/10.1007/0-387-28695-0?source=post_page-----1f92b4ed4149--------------------------------) de Leland Wilkinson. El libro de la *gramática de los gráficos*, filosofía debajo de la librería ggplot2. Recomendable para cualquiera que le interese la visualización en general.

:::

Instalamos y cargamos la librería 

```{r ggplot01}

#install.packages(ggplot2)
library(ggplot2)

```

Vamos a usar conjuntos de datos que trae la librería ggplot2 como ejemplo, empezamos con `mpg`

```{r ggplot02}

mpg

```

# Gramática de Gráficos

Similar a cómo la gramática del lenguaje organiza el lenguaje mediante un conjunto de reglas, la gramática de gráficos define un conjunto de reglas para estructurar gráficos.

En su núcleo, la **gramática de gráficos** gira en torno al concepto de capas. Una combinación coherente de capas culmina en la formación de un gráfico.

## Capas

* _Datos_: conjunto de datos que se está visualizando  
* _Estéticas_: vincula variables del conjunto de datos con propiedades visuales como color, tamaño y forma  
* _Geometrías_: representación visual utilizada para los datos (líneas, puntos, barras)  
* _Facetas_: divide los datos en subconjuntos según una o más variables categóricas (país, género, edad)  
* _Estadísticas_: geometrías calculadas basadas en medidas estadísticas  
* _Coordenadas_: especifica el tipo de sistema de coordenadas, como cartesiano, polar, etc.  
* _Temas_: apariencia de las decoraciones del gráfico (ejes, líneas de cuadrícula, fondo)  

::: {#fig-layers}
![](images/gglayers.png){width=400}

Imagen adaptada de *The Grammar of Graphics*. [Fuente](https://r.qcbs.ca/workshop03/book-en/grammar-of-graphics-gg-basics.html).
:::


Fundamentalmente, cada gráfico requiere un conjunto de datos, una representación geométrica y especificaciones estéticas.  

```{r ggplot03}
#| eval: false

ggplot(data = <DATA>, mapping = aes(<MAP>)) + <GEOMETRY>(OPTIONS)

```

La geometría se refiere al tipo de gráfico (dispersión, línea, barra, etc.), y las estéticas describen cómo se asignan los datos a los ejes, es decir, qué colocamos en los ejes.  

La función para crear un gráfico es `ggplot()`.  

Construyamos un gráfico que relacione las variables `displ` y `hwy`. El primer paso es llamar al conjunto de datos y especificar las variables que queremos representar; este último aspecto es lo que ggplot denomina *estéticas*.  

## Datos y estéticas  

```{r ggplot035_0}

graph <- ggplot(mpg) 

graph

```

```{r ggplot035}

graph <- ggplot(mpg, aes(x = displ, y = hwy)) 

graph

```

## Geometrías  

Vemos que esto representa una especie de lienzo donde se visualizan las variables a representar. Necesitamos una *capa* de geometría. Puedes ver una lista de geometrías de ggplot2 [aquí](https://ggplot2.tidyverse.org/reference/#geoms).  

```{r ggplot04}

graph <- ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point()

graph

```

Dentro de las estéticas, podemos incorporar opciones adicionales:  

* `color`: Especifica el color de la geometría y puede variar según una tercera variable si existe dicha dependencia.  

* `fill`: Define el color de relleno de la geometría si es una forma que puede llenarse (como barras, puntos, polígonos, etc.).  

* `shape`: Indica la forma de los puntos (pares ordenados o n-adas de las variables representadas) o de las líneas que los conectan.  

* `size`: Define el tamaño de la geometría.  

* `alpha`: Controla la transparencia de la geometría.  

Añadimos un color a la geometría que depende de la variable categórica `class` del conjunto de datos.  

```{r ggplot05}

graph <- ggplot(mpg, aes(x = displ, y = hwy, color = class)) +
  geom_point()

graph

```

Esto es lo que llamamos una estética _no fija_. En este caso, debe aparecer como argumento dentro de la función `aes()`.  

Observa lo que sucede si incluimos el argumento `color` en `geom_point()`.  

```{r ggplot055}
#| eval: false

graph <- ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point(color = class)

graph

```

Obtenemos un error. Sustituyamos la variable `class` por un nombre de color.  

```{r ggplot056}

graph <- ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point(color = "blue")

graph

```

Esto es lo que llamamos una _estética fija_, es decir, el color es el mismo para todos los puntos.  

Asimismo, podemos incluir una forma para cada par ordenado que dependa de otra variable, en este caso `cyl`. Antes de añadirla, la convertimos en un factor.  

```{r ggplot06}

graph <- ggplot(mpg, aes(x = displ,
                         y = hwy,
                         color = class,
                         shape = factor(cyl))
                ) +
  geom_point()

graph

```

Podemos modificar el tamaño de las estéticas.  

```{r ggplot065}

graph <- ggplot(mpg, aes(x = displ, y = hwy, color = class, shape = factor(cyl))) +
  geom_point(size = 3)

graph

```

Honestamente, este gráfico introduce más confusión de la que resuelve. Volvamos a una versión más simple y seleccionemos la forma de los elementos estéticos utilizando el atributo `shape`. Cada opción de forma tiene un número específico, que puedes consultar [aquí](https://ggplot2.tidyverse.org/articles/ggplot2-specs.html#point).  

```{r ggplot07}

graph <- ggplot(mpg, aes(x = displ, y = hwy, color = factor(cyl))) +
  geom_point(size = 3, shape = 23)

graph

```

Mantengamos círculos un poco más grandes.  

```{r ggplot08}

graph <- ggplot(mpg, aes(x = displ, y = hwy, color = factor(cyl))) +
  geom_point(size = 4, shape = 21)

graph

```

Vamos a excluir los coches con 5 cilindros (ya que hay muy pocos), y de esta manera vemos cómo podemos manipular el conjunto de datos dentro de las instrucciones del gráfico.  

```{r ggplot09}

graph <- ggplot(mpg |> dplyr::filter(cyl != 5),
                  aes(x = displ, y = hwy, color = factor(cyl))) +
  geom_point(size = 4, shape = 21)

graph

```

Cambiando la geometría, gráfico de barras  

```{r ggplot092}

graph <- ggplot(mpg, aes(x = cyl, fill = factor(class))) +
  geom_bar()

graph

```

```{r ggplot0925}

graph <- ggplot(mpg, aes(x = cyl, fill = factor(class))) +
  geom_bar() +
  coord_flip()

graph

```

```{r ggplot0926}

graph <- ggplot(mpg, aes(x = cyl, fill = factor(class))) +
  geom_bar(position = "dodge")

graph

```

```{r ggplot0927}

graph <- ggplot(mpg, aes(x = class, fill = factor(cyl))) +
  geom_bar(position = "fill") +
  labs(y = "Proportion")

graph

```

Exploraremos un conjunto de datos diferente que es adecuado para la creación de gráficos de líneas, el conjunto de datos `economics`

```{r ggplotecon}

economics


```

Gráfico de líneas

```{r ggplot082}

graph <- ggplot(economics, aes(x = date, y = unemploy)) +
  geom_line()

graph

```

```{r ggplot083}

graph <- ggplot(economics, aes(x = date, y = unemploy)) +
  geom_line(color = "blue", size = 1.2)

graph

```

```{r ggplot084}

graph <- ggplot(economics, aes(x = date, y = unemploy)) +
  geom_line(color = "blue", size = 1.2, linetype = "dashed")

graph

```

Diferentes tipos de líneas  

```{r ggplot0845}

ggplot(economics_long, aes(date, value01)) +
  geom_line(aes(linetype = variable))

```


```{r ggplot085}

graph <- ggplot(economics, aes(x = date, y = unemploy)) +
  geom_line() +
  geom_area(fill="lightblue", color="black")

graph

```


Histogramas

```{r ggplot14}
#| warning: false

graph_h <- ggplot(mpg, aes(x = cty)) +
  geom_histogram()

graph_h

```

No se ve muy bien, cambiemos los parámetros predeterminados, como el ancho de los intervalos (`binwidth`)

```{r ggplot15}
#| warning: false

graph_h <- ggplot(mpg, aes(x = cty)) +
  geom_histogram(binwidth = 3)

graph_h

```

O el número de intervalos (`bins`)

```{r ggplot152}
#| warning: false

graph_h <- ggplot(mpg, aes(x = cty)) +
  geom_histogram(bins = 8)

graph_h

```

O usemos algunos colores

```{r ggplot16}
#| warning: false

graph_h <- ggplot(mpg, aes(x = cty)) +
  geom_histogram(binwidth = 3, fill = "blue", color = "black")

graph_h

```


Un diagrama de caja o boxplot

```{r ggplot17}
#| warning: false

graph_b <- ggplot(mpg, aes(x =factor(class), y = hwy)) +
  geom_boxplot()

graph_b

```

Cambiemos el color

```{r ggplot172}
#| warning: false

graph_b <- ggplot(mpg, aes(x =factor(class), y = hwy)) +
  geom_boxplot(color= "black", fill = "cornsilk")

graph_b

```

```{r ggplot173}
#| warning: false

graph_b <- ggplot(mpg, aes(x =factor(class), y = hwy, fill = factor(class) )) +
  geom_boxplot()

graph_b

```

Comparación de distribuciones con densidades  

```{r ggpplot1745}

ggplot(mpg |> dplyr::filter(cyl != 5),
       aes(x = hwy)
       ) +
  geom_density(alpha = 0.4) +
  facet_grid(~ cyl)

```


```{r ggpplot174}

ggplot(mpg |> dplyr::filter(cyl != 5),
       aes(x = hwy, fill = factor(cyl))
       ) +
  geom_density(alpha = 0.4) 

```

Otra forma de representar densidades es mediante un _joyplot_, que se puede crear con la biblioteca `ggridges`. Un _joyplot_ es un tipo de gráfico que muestra múltiples gráficos de densidad apilados, lo que facilita la comparación de las distribuciones de diferentes grupos o categorías


```{r ggpplot175}

library(ggridges)

ggplot(mpg, 
       aes(x = hwy, y = class, fill = class)) +
  geom_density_ridges() + 
  theme_ridges()

```

## Facetas

Puede que no sea fácil visualizar todo en un solo gráfico; en este caso, podemos crear un subgráfico para cada variable categórica. En tales casos, podemos definir facetas con `facet_wrap()`  

```{r ggplot12}
#| warning: false

graph <- ggplot(mpg |> dplyr::filter(cyl != 5),
                  aes(x = displ, y = hwy, color = factor(cyl))) +
  geom_point(size = 4, shape = 21) +
  facet_wrap( ~ cyl)

graph

```

También puedes crear facetas utilizando dos variables categóricas con `facet_grid()`

```{r ggplot13}
#| warning: false

graph <- ggplot(mpg |> dplyr::filter(cyl != 5),
                  aes(x = displ, y = hwy, color = factor(manufacturer))) +
  geom_point(size = 4, shape = 21) +
  facet_grid(class ~ cyl)

graph

```

```{r ggplot17f}
#| warning: false

graph_b <- ggplot(mpg, aes(x =factor(class), y = hwy)) +
  geom_boxplot(color= "black", fill = "cornsilk")+
  facet_wrap(~year)

graph_b

```

## Estadísticas  

Ahora, estimemos una relación lineal entre las variables `hwy` y `displ` para cada nivel de cilindros.  

```{r ggplot10}
#| warning: false

graph <- ggplot(mpg |> dplyr::filter(cyl != 5),
                  aes(x = displ, y = hwy, color = factor(cyl))) +
  geom_point(size = 4, shape = 21) +
  geom_smooth(method = lm)

graph

```

Tenemos la capacidad de ajustar la apariencia de las funciones de suavizado. Por ejemplo, podemos eliminar el intervalo de confianza y cambiar el grosor de la línea.  

```{r ggplot105}
#| warning: false

graph <- ggplot(mpg |> dplyr::filter(cyl != 5),
                  aes(x = displ, y = hwy, color = factor(cyl))) +
  geom_point(size = 4, shape = 21) +
  geom_smooth(method = lm, se = FALSE, size = 3)

graph

```

Y si queremos que la relación sea no lineal, no especificamos el método (por defecto es no lineal).  

```{r ggplot11}
#| warning: false

graph <- ggplot(mpg |> dplyr::filter(cyl != 5),
                  aes(x = displ, y = hwy, color = factor(cyl))) +
  geom_point(size = 4, shape = 21) +
  geom_smooth()

graph

```

Una versión no lineal más simple.  

```{r ggplot18}

graph <- ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point(colour = "blue", size = 2) +  
  geom_smooth(method = "lm", formula = y ~ poly(x, 2), color = "red")

graph 

```

## Temas  

La función `theme()` en `ggplot2` permite personalizar los componentes no relacionados con los datos en tus gráficos, como los ejes, etiquetas, fondos y más.  

Cuando ejecutas `?theme`, notarás que hay numerosos elementos dentro de un gráfico que pueden modificarse. Antes de profundizar en una selección de estos elementos personalizables, primero exploraremos las funciones de temas que ofrecen configuraciones predefinidas para estilos específicos.

### Default: Grey

```{r themes1}

graph +
  theme_gray()

```

### Theme BW

```{r themes2}

graph +
  theme_bw()

```

### Theme dark

```{r themes3}

graph +
  theme_dark()

```

### Theme minimal

```{r themes4}

graph +
  theme_minimal()

```

### Theme classic

```{r themes5}

graph +
  theme_classic()

```

### Theme Light

```{r themes6}

graph +
  theme_light()

```

### ggthemes

El paquete `ggthemes` proporciona temas adicionales que amplían las opciones de personalización en `ggplot2`, permitiéndote aplicar una variedad de estilos predefinidos a tus gráficos 

```{r themes7}

library(ggthemes)

graph +
  theme_economist()

```

```{r themes8}

graph +
  theme_fivethirtyeight()

```

 
```{r themes9}

graph +
  theme_stata()

```

Antes de profundizar en la función `theme`, primero agreguemos etiquetas informativas a nuestro gráfico, como un título, etiquetas de ejes y otras anotaciones relevantes

```{r themes10}

graph <- graph +
  labs(title = "My First Plot",
       subtitle = "With ggplot",
       caption = "Source: Me") +
  xlab("Engine displacement") +
  ylab("Highway miles per gallon")

graph

```

[Here](https://ggplot2.tidyverse.org/reference/theme.html), you can find a comprehensive list of theme elements available in `ggplot2`. The following figure illustrates and helps you identify some of these key elements in a plot.

::: {#fig-themes}
![](images/themes.png){width=90%}

ggplot2 Theme Elements Reference Sheet ([source](https://isabella-b.com/blog/ggplot2-theme-elements-reference/))

:::

Usando la figura como guía, procedamos a modificar algunos elementos del gráfico para ver cómo impactan en la apariencia general del mismo.  

Este es nuestro gráfico base.  


```{r themes11}

graph <- graph +
  theme_minimal()

graph

```

Comenzaremos personalizando el título del gráfico. Para ello, consultaremos la documentación de la función `theme()` para comprender cómo estructurar correctamente los argumentos. Esto nos ayudará a controlar la apariencia del título, como el tamaño de la fuente, el color, la alineación y su posición en el gráfico.


```{r themes115}

graph +
  theme(plot.title = element_text(hjust = 0.5, family = "serif", size = 20, colour = "brown"))

```

Etiquetas de ejes

```{r themes12}

graph +
  theme(plot.title = element_text(hjust = 0.5, family = "serif", size = 20, colour = "brown")) +
  theme(axis.title.x = element_text(size = 15, colour = "purple", family = "mono"))

```

Si queremos modificar las etiquetas de ambos ejes

```{r themes13}

graph +
  theme(plot.title = element_text(hjust = 0.5, family = "serif", size = 20, colour = "brown")) +
  theme(axis.title = element_text(size = 15, colour = "purple", family = "mono"))

```

El fondo

```{r themes14}

graph +
  theme(plot.title = element_text(hjust = 0.5, family = "serif", size = 20, colour = "brown")) +
  theme(axis.title = element_text(size = 15, colour = "purple", family = "mono")) +
  theme(plot.background = element_rect(fill = "lightsalmon1"))

```

Añadimos un eje

```{r themes15}

graph +
  theme(plot.title = element_text(hjust = 0.5, family = "serif", size = 20, colour = "brown")) +
  theme(axis.title = element_text(size = 15, colour = "purple", family = "mono")) +
  theme(plot.background = element_rect(fill = "lightsalmon1")) +
  theme(axis.line = element_line())

```

Formatear el texto de los ejes

```{r themes16}

graph +
  theme(plot.title = element_text(hjust = 0.5, family = "serif", size = 20, colour = "brown")) +
  theme(axis.title = element_text(size = 15, colour = "purple", family = "mono")) +
  theme(plot.background = element_rect(fill = "lightsalmon1")) +
  theme(axis.line = element_line()) +
  theme(axis.text = element_text(face = "bold.italic"))

```

Sin líneas de cuadrícula

```{r themes17}

graph +
  theme(plot.title = element_text(hjust = 0.5, family = "serif", size = 20, colour = "brown")) +
  theme(axis.title = element_text(size = 15, colour = "purple", family = "mono")) +
  theme(plot.background = element_rect(fill = "lightsalmon1")) +
  theme(axis.line = element_line()) +
  theme(axis.text = element_text(face = "bold.italic")) +
  theme(panel.grid = element_blank())

```

Líneas de cuadrícula personalizadas

```{r themes18}

graph +
  theme(plot.title = element_text(hjust = 0.5, family = "serif", size = 20, colour = "brown")) +
  theme(axis.title = element_text(size = 15, colour = "purple", family = "mono")) +
  theme(plot.background = element_rect(fill = "lightsalmon1")) +
  theme(axis.line = element_line()) +
  theme(axis.text = element_text(face = "bold.italic")) +
  theme(panel.grid = element_blank()) +
  theme(panel.grid.major.x = element_line(colour = "yellow", linetype = "dashed")) 

```

```{r themes19}

graph +
  theme(plot.title = element_text(hjust = 0.5, family = "serif", size = 20, colour = "brown")) +
  theme(axis.title = element_text(size = 15, colour = "purple", family = "mono")) +
  theme(plot.background = element_rect(fill = "lightsalmon1")) +
  theme(axis.line = element_line()) +
  theme(axis.text = element_text(face = "bold.italic")) +
  theme(panel.grid = element_blank()) +
  theme(panel.grid.major.x = element_line(colour = "yellow", linetype = "dashed")) +
  theme(panel.grid.minor.x = element_line(colour = "black", linetype = "solid"))

```

```{r themes20}

graph +
  theme(plot.title = element_text(hjust = 0.5, family = "serif", size = 20, colour = "brown")) +
  theme(axis.title = element_text(size = 15, colour = "purple", family = "mono")) +
  theme(plot.background = element_rect(fill = "lightsalmon1")) +
  theme(axis.line = element_line()) +
  theme(axis.text = element_text(face = "bold.italic")) +
  theme(panel.grid = element_blank()) +
  theme(panel.grid.major.x = element_line(colour = "yellow", linetype = "dashed")) +
  theme(panel.grid.minor.x = element_line(colour = "black", linetype = "solid")) +
  theme(panel.grid.major.y = element_line(colour = "green", linetype = "dashed")) +
  theme(panel.grid.minor.y = element_line(colour = "black", linetype = "solid"))


```

Cambiar el fondo del panel

```{r themes21}

graph +
  theme(plot.title = element_text(hjust = 0.5, family = "serif", size = 20, colour = "brown")) +
  theme(axis.title = element_text(size = 15, colour = "purple", family = "mono")) +
  theme(plot.background = element_rect(fill = "lightsalmon1")) +
  theme(axis.line = element_line()) +
  theme(axis.text = element_text(face = "bold.italic")) +
  theme(panel.grid = element_blank()) +
  theme(panel.grid.major.x = element_line(colour = "yellow", linetype = "dashed")) +
  theme(panel.grid.minor.x = element_line(colour = "black", linetype = "solid")) +
  theme(panel.grid.major.y = element_line(colour = "green", linetype = "dashed")) +
  theme(panel.grid.minor.y = element_line(colour = "black", linetype = "solid")) +
  theme(panel.background = element_rect(fill = "bisque"))


```

## Guardar gráficos  

Finalmente, podemos guardar nuestro gráfico utilizando la función `ggsave()`. Puedes elegir el formato del archivo de salida  

Por defecto, la función `ggsave()` guarda el último gráfico

```{r save1}
#| warning: false
#| eval: false

ggsave(filename = "myPlot.pdf", device = "pdf")

```

El argumento `device` controla el tipo de archivo de salida

```{r save2}
#| warning: false
#| eval: false

ggsave(filename = "myPlot.jpeg", device = "jpeg")

```
