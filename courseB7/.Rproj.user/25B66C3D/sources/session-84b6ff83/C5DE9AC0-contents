---
title: "Data Frames"
format: html
execute:
  echo: true
  messages: false
  warning: false
editor: source
---

En esta formación abarcaremos tres formas de ineractuar con datos rectangulares (tablas, datasets, etc.): usando R base (sin recurrir a ninguna librería), la librería `dplyr` y la librería `data.table`.

Empezaremos por describir un conjunto de operaciones básicas comunes a los tres enfoques, para posteriormente comparar operaciones con las tres estrategias.

Vamos a cargar las librerías que usaremos

```{r datos01}
#| warning: false
#| message: false

#install.packages("dplyr", "readr", "tidyr", "data.table", "tictoc")
library(dplyr)
library(readr)
library(tidyr)
library(data.table)
library(tictoc)

```


# Data frames

Gran parte de los datos con los que trabajamos están organizados en arreglos rectangulares, donde las filas representan las instancias, individuos u objetos de estudio, y las columnas las características de los mismos.  Esto implica que por definición, dado que las unidades de estudio se representan como entes multidimensionales, que las filas son heterogéneas (una fila es un individuo caracterizado, por ejemplo, por su edad, código postal de su residencia, saldo de su cuenta bancaria, etc.), y las columnas son homogéneas (la columna de edad son todos enteros si se representan en años) 

En R, el contenedor usado para poder realizar análisis sobre datos rectangulares, son los data frames.

Formalmente hablando, los data frames son **listas de vectores** de igual magnitud. **Por eso es importante tener un buen conocimiento de como se comportan los vectores y las listas**. Aunque un estudio en profundidad de estas estructuras de datos (contenedores) no forma parte de esta formación, haremos referencia a estas cuando haga falta.

## Cargar los datos

Debemos cargar el archivo .csv y asignarlo a un objeto en R. Con R base lo haríamos con la función `read.csv()`, con dplyr con la función `read_csv()` y con data.table con `fread()` 


::: {.panel-tabset}

## R base

```{r df1}
tic(msg = "R base")
figarodf <- read.csv(file = "./data/icUse24ed2020.csv")
toc()

```

## Dplyr

```{r dplyr02}
tic(msg = "dplyr")
figarotb <- read_csv(file = "./data/icUse24ed2020.csv")
toc()

```

## data.table

```{r dplyr02}
tic(msg = "data.table")
figarodt <- fread(file = "./data/icUse24ed2020.csv")
toc()

```


:::

Sin haber mencionado nada acerca de las diferencias entre las tres librerías, ya podemos observar algo, la **velocidad** a la cual se leen los datos en memoria. Analizaremos más adelante que esto no es algo específico a esta tarea, sino una característica general de la librería `data.table`  


## Inspeccionar los datos

Por lo general, solemos inspeccionar los datos de una tabla para familiarizarnos con ellos y ver que tipo de análisis podemos realizar con ellos.

Como hemos mencionado al inicio, vamos a empezar con operaciones básicas en R base, y luego pasaremos a analizar estrategias por librerías.

Existen varias formas de echar vistazos rápidos a los datos sin necesidad de visualizar la tabla entera, haremos todo

Por ejemplo podemos ver las 6 primeras filas

```{r df2}

head(figarodf)

```

O las 6 últimas

```{r df3}

tail(figarodf)

```

Si en lugar de 6, queremos ver un determinado número de filas, simplemente se lo decimos a las funciones `head`y `tail`

```{r df4}

head(figarodf, n = 3)

tail(figarodf, n = 2)

```

En el caso en que tengamos muchas columnas, la inspección visual es engorrosa, pero, al igual que las listas, si un data frame es una lista de vectores, donde los vectores son las columnas, podemos acceder a los nombres de las columnas usando `names()`

```{r df5}

names(figarodf)

```


Asimismo, un data frame es un objeto rectangular, es decir, con más de una dimensión, como una matriz, por lo que podremos obtener el número de filas y columnas con `dim()`

```{r df6}

dim(figarodf)

```

Podemos ver por separado el número de filas y columnas con `nrow` y `ncol`

```{r df7}

ncol(figarodf)

nrow(figarodf)

```


Otra forma es usando la función `str`. Aunque no es intuitiva e incluso intimida a primera vista, no es tan complicado y aporta información útil. En `dplyr` la función `glimpse` hace algo similar


::: {.panel-tabset}

## R base

```{r df8}

str(figarodf)

```

## Dplyr 

```{r dplyr03}

glimpse(figarodf)

```

:::

Una versión que aporta información estadística es `summary`

```{r df9}

summary(figarodf)

```

Podemos acceder a elementos de los vectores por posición o nombre

```{r df12}

head(figarodf, n = 1)

figarodf[1,2] 

figarodf[1,4] 

```

En el primer caso le decimos a R que queremos que nos muestre el dato de la primera fila y la segunda columna, en el segundo caso el dato de la primera fila y cuarta columna

En el caso que deseemos ver una columna o fila específica, dejamos una de las dimensiones en blanco

Si queremos acceder a la información de la segunda fila

```{r df13}

figarodf[2, ]

```

Si queremos acceder a la información de la cuarta columna

```{r df14}

figarodf[ , 4] |> head()

```

Observe que el resultado ya no parece un data frame, y es porque no lo es.

Los vectores son el contenedor básico de datos en R, podemos reducir cualquier contenedor en R a un vector. En los vectores podemos almacenar datos de un solo tipo (numérico -entero o doble-, caracteres y lógico)

Asimismo, podemos inspeccionar una columna de data frame escribiendo el nombre del mismo seguido de un signo `$` y el nombre de la columna

La ventaja de este método es que los nombres de la columna se autocompletan

```{r df16}

head(figarodf$OBS_VALUE)

```

A partir de ahora, describiremos las principales operaciones de manipulación de datos con las tres estrategias, pero antes de esto, describieremos brevemente las librerías `dplyr` y `data.tabla`

También podemos obtener la información por columna usando el nombre de la misma

```{r df15}

productos[ , "TIME_PERIOD"] |> head()

```


Con la posición, podemos acceder a conjuntos de filas y columnas (slices)

Por ejemplo, si nos queremos quedar solo con las 3 primeras filas y la cuarta y quinta columna

```{r df17}

productos[1:3, 4:5]

```

### Manipulación de data frames

Podemos añadir columnas a un data frame, usemos una versión reducida de `productos`

```{r df18}

(productos_mini <- productos[1:10, ])

```

Creamos un vector (con nombre) de caracteres de longitud 10

```{r df18_5}

( nueva_columna <- letters[1:10] )

```

Añadimos este vector como una nueva columna a `productos_mini`

```{r df19}

productos_mini$new <- nueva_columna

productos_mini

```

Otra forma de añadir una nueva(s) columna(s) es usando la función `cbind()`


```{r df20}

( new2 <- letters[11:20] )

( productos_mini <- cbind(productos_mini, new2) )

```

Asimismo podemos usar `rbind()` para añadir nuevas filas al data frame


```{r df21}

( rbind(productos_mini[, 1:(ncol(productos_mini)-2)], productos[11:15, ]) )

```

Prestar atención a lo que hemos hecho para poder adaptar productos_mini al número de columnas del sub conjunto de productos. 

Para aplicar la función `cbind()`hay que asegurarse que los data frames tengan el mismo número de filas, y para `rbind()` que tengan el mismo número de columnas.

Si queremos cambiar el orden de las columnas pasamos un vector de caracteres como máscara en la dimensión de columnas como máscara.

```{r df22}

orden_nuevo <- c ("UnitPrice", "UnitsInStock", "UnitsOnOrder", "Category", "Discontinued", "ProductName", "ProductID", "ReorderLevel", "SupplierID")

head(productos[, orden_nuevo])

```

Si lo que queremos es ordenar por filas 


```{r df26}

head(productos[order(productos$ProductID), ])

```

En orden descendente

```{r df27}

head(productos[order(-productos$ProductID), ])

```

Si deseamos crear una nueva columna a partir de otras

```{r df23}

productos_mini$mpgOvercyl <- productos_mini$UnitPrice / productos_mini$UnitsInStock

productos_mini

```


Y  podemos filtrar filas usando condiciones lógicas al igual que hacíamos con los vectores

```{r df24}

head(productos[productos$UnitPrice > 500 & productos$Category  == "Home Goods", ])

```

```{r df25}

head(productos[productos$UnitPrice > 500 | productos$Category  == "Home Goods", ])

```

```{r df266}

head(productos[productos$Category  == "Home Goods", ])

```

A continuación, vamos a replicar las queries de SQL de la sección anterior con lo aprendido en esta lección. Cargamos las tablas necesarias para poder hacer la replicación

```{r df275}

clientes <- read.csv(file = "./data/customer.csv")
ordenes <- read.csv(file = "./data/order.csv")

```

```{r con01}
#|echo: false

library(DBI, RSQLite)

con <- dbConnect(RSQLite::SQLite(), dbname = ":memory:")

dbWriteTable(conn = con, name = "clander", value = read.csv("./data/clander.csv"))
dbWriteTable(conn = con, name = "clientes", value = read.csv("./data/customer.csv"))
dbWriteTable(conn = con, name = "ordenes", value = read.csv("./data/order.csv"))
dbWriteTable(conn = con, name = "productos", value = read.csv("./data/product.csv"))

```



```{sql query01}
#| connection: con
SELECT *
FROM clientes
WHERE Country <> 'China'
LIMIT 5
```

```{r df255}

head(clientes[clientes$Country != "China", ], 5)

```

```{sql query02}
#| connection: con
SELECT *
FROM clientes
WHERE Country <> 'China'
LIMIT 5
```

```{r df2666}

head(clientes[clientes$Country != "China", ], 5)

```

```{sql query03}
#| connection: con
SELECT
CustomerID AS IDCliente,
Email AS Correo,
Country AS Pais
FROM clientes
WHERE Country <> 'China'
LIMIT 5
```

```{r df277}

cli_china <- head(clientes[clientes$Country != "China", c("CustomerID", "Email", "Country")], 5)

cli_china

```

```{r df28}

cli_china2 <- head(clientes[clientes$Country != "China", c("CustomerID", "Email", "Country")], 5)
names(cli_china2) <- c("IDCliente", "Correo", "Pais")

cli_china2

```

```{sql query04}
#| connection: con
SELECT CustomerID AS IDCliente,
       Email AS Correo,
       Country AS Pais,
       Gender AS Genero
FROM clientes
WHERE Country = 'China'
AND Gender = 'Male'
LIMIT 5
```

```{r df29}

cli_china3 <- head(clientes[clientes$Country == "China" & clientes$Gender == "Male",
                            c("CustomerID", "Email", "Country", "Gender")], 5)
names(cli_china3) <- c("IDCliente", "Correo", "Pais", "Género")

cli_china3

```

```{sql query05}
#| connection: con
SELECT CustomerID AS IDCliente,
       Email AS Correo,
       Country AS Pais,
       Gender AS Genero
FROM clientes
WHERE CustomerID > 5
AND CustomerID < 10

```

```{r df30}

cli_china4 <- head(clientes[clientes$CustomerID > 5 & clientes$CustomerID < 10,
                            c("CustomerID", "Email", "Country", "Gender")], 5)
names(cli_china4) <- c("IDCliente", "Correo", "Pais", "Género")

cli_china4

```


```{sql query06}
#| connection: con
SELECT Country AS Pais,
       COUNT(CustomerID) AS Clientes
FROM clientes
GROUP BY Country
ORDER BY Clientes DESC
LIMIT 5

```

Para realizar esta query en R (base), debemos recurrir a varias funciones. Este tipo de operaciones se simplificaran mucho en las próximas sesiones cuando presentemos dos librerías cuya sintaxis se asemeja más al lenguaje SQL, mientras mantiene la simplicidad de R

Para agregar y agrupar vamos a usar la función `aggregate()`, luego ordenaremos como se ha explicado antes y dejaremos el `head()` para el final


```{r df31}

cli_china5 <- aggregate(CustomerID ~ Country, data = clientes, FUN = length)

names(cli_china5) <- c("País", "Clientes")

cli_china5 <- cli_china5[order(-cli_china5$Clientes), ]

cli_china5 <- head(cli_china5, 5)

cli_china5

```
Otra opción es usar la función `by()`, el problema es que el output de la misma no es un data frame, por lo que hay un paso adicional en esta operación

```{r df32}

cli_china6 <-  by(clientes$CustomerID, clientes$Country, FUN = length)

cli_china6 <- sort(cli_china6, decreasing = TRUE)

cli_china6 <- as.data.frame(cli_china6)

names(cli_china6) <- c("Clientes")

cli_china6 <- head(cli_china6, 5)

cli_china6

```

Como se ha mencionado antes, este es el tipo de operaciones que se simplifican mucho usando las librerías que presentaremos más adelante.


```{sql query07}
#| connection: con
SELECT
  ordenes.OrderID AS Pedido,
  ordenes.CustomerID AS Cliente,
  clientes.Email AS Correo,
  clientes.Country AS Pais,
  clientes.Gender AS Genero
FROM ordenes
LEFT JOIN clientes
  ON ordenes.CustomerID = clientes.CustomerID
WHERE clientes.Country = 'China'
LIMIT 5

```

```{r df33}

cli_china7 <- merge(x = ordenes[ , c("OrderID", "CustomerID")],
                    y = clientes[ , c("CustomerID", "Email", "Country", "Gender")],
                    by = "CustomerID",
                    all.x = TRUE)


names(cli_china7) <- c("Cliente", "Pedido", "Correo", "Pais", "Género")

cli_china7 <- cli_china7[cli_china7$Pais == "China", ]

cli_china7 <- head(cli_china7, 5)

cli_china7

```

```{r con2}
#| echo: false

dbDisconnect(con)

```

