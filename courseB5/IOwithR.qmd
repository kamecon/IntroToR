---
title: "Input -Output with R"
author: "Kamal Romero"
date: "`r format(Sys.time(), '%m %d, %Y')`"
format:
  html: 
    toc: true
    toc-depth: 3
    toc-location: left
    link-external-newwindow: true
---

```{r libraries}
#| echo: false
#| warning: false

#Load the libraries with "pacman".

#Verify if the pacman library is installed, if not, it is installed
if (! ('pacman' %in% installed.packages())) install.packages('pacman')

#Once pacman is installed, this command loads the library, and if it is not installed, it installs the libraries.
pacman::p_load(openxlsx, knitr, tibble, readxlsb)

```

# R programming language: A (very) brief introduction 

## What Is R?

The following definition is from the book [Learning R de Richard Cotton](https://www.oreilly.com/library/view/learning-r/9781449357160/):

"*Just to confuse you, R refers to two things. There is R, the programming language, and R, the piece of software that you use to run programs written in R. Fortunately, most of the time it should be clear from the context which R is being referred to.*"

"*R (the language) was created in the early 1990s by Ross Ihaka and Robert Gentleman, then both working at the University of Auckland. It is based upon the S language that was developed at Bell Laboratories in the 1970s, primarily by John Chambers. R (the software) is a GNU project, reflecting its status as important free and open source software.*"

## Strengths of R

* Free and open source

* Platform independent

* Foster's a reproducible workflow

* Active community of users and programmers making R better

## Working environment

In this course we will use [Rstudio](https://posit.co/download/rstudio-desktop/).

Rstudio is an IDE (integrated development environment) that works as a graphical interface that facilitates the use of the R language.

You have a online version, [Posit cloud](https://login.rstudio.cloud/login?redirect=%2F) 

## R vs RStudio

The following image and sentence is taken from the book [Statistical Inference via Data Science: A ModernDive into R and the Tidyverse](https://moderndive.com/index.html)

::: {#fig-rvsrstudio}
![](https://moderndive.com/images/shutterstock/R_vs_RStudio_1.png)

R vs Studio [Source](https://moderndive.com/1-getting-started.html). 

:::

"*More precisely, R is a programming language that runs computations, while RStudio is an integrated development environment (IDE) that provides an interface by adding many convenient features and tools. So just as the way of having access to a speedometer, rearview mirrors, and a navigation system makes driving much easier, using RStudioâ€™s interface makes using R much easier as well.*"

## Alternatives

There are alternatives to Rstudio, but Rstudio is the de facto R IDE for many.

An alternative that is gaining a lot of popularity is the well-known [Visual Studio Code](https://code.visualstudio.com/).

If you don't want to use Rstudio, this would be the suggested alternative


## Highlights of RStudio

::: {#fig-rstdio}
![](images/rstudio-panes-labeled.jpeg)

RStudio pane layout. [Source](https://docs.posit.co/ide/user/ide/guide/ui/ui-panes.html). 
:::

* Lower Right:
    + Files, Plots, Packages, Help

* Upper Right: 
    + Environment, History

* Lower Left: Console

* Upper Left: Text editor

* Nice Features:
    + Importing Data
    + Tab completion
    + **ChatGTP**
    
## Projects, directories and libraries: Organising the working environment

To keep all our files organised, including databases we load or graphics we create, we are going to work in what RStudio calls projects.

Essentially, a RStudio project is a folder or directory on your computer that contains all the elements of your project.

::: {#fig-project}
![](images/create RProject.gif)

Create a R project
:::

The use of projects in RStudio is a good practice that allows you to keep control of all the files used in a project.

Projects are often not only complex but also dynamic, and the management of all the elements that make up a project is often an essential part of the workflow.

Furthermore, the organisation into projects facilitates reproducibility.

For a more detailed discussion, read this [section](https://r4ds.hadley.nz/workflow-scripts.html#projects) of this [good book](https://r4ds.hadley.nz/).

## Basic functioning

Next, we are going to introduce the basic handling of the working environment, such as defining variables, making comments to the code, etc. In this process, we will be introducing language concepts that we will be defining in a formal way later on.

### Arithmetic operations

To introduce us to the use of the editor and the command line of Rstudio, we will start with some very basic operations

```{r operaciones}

2 + 2

5 - 3

3 * 2

6 / 3

```

It is possible to apply standard association rules as well as operations beyond the basic ones (power, logarithm, etc.)

```{r operaciones 2}

(5 + 3) / 4

3^2

log(100, base = 10)

5 %% 3

sqrt(9)


```

### Assigning variables

We can store *values* by assigning a name to them, so that we can access the value later.

```{r asigna}

x <- 4

x

y <- (5 + 3) / 4

y

```

You create variables, or create new *objects* with the `<-` operator. You can also do this in the more conventional way with `=` but this is not standard practice.

```{r}

Employees <- 150

Employees

```

With names you have to respect certain conventions: they must start with a letter and can only contain letters, numbers, `_` and `.`.

You are free to name variables as you like, but there are some rules of style, for example

```{r}
#| eval: false

i_use_snake_case
otherPeopleUseCamelCase
some.people.use.periods
What_EVer.I.wha_NT

```

::: {#fig-style}
[![](https://cdn.myportfolio.com/45214904-6a61-4e23-98d6-b140f8654a40/dbb99049-2916-4bc8-824f-1816f5c4f06d_rw_1920.png?h=f0b45a30ba31ad414562d1085cd6c172)](https://allisonhorst.com/everything-else)

An illustration of variable naming styles by the great [Allison Horst](https://allisonhorst.com/allison-horst). [Source](https://allisonhorst.com/everything-else). 
:::

```{r}

New_analysts_January <- 5

New_analysts_February <- 3

Analysts <- New_analysts_January + New_analysts_February

Analysts

```

### Introduce comments

Comments are initiated with `#`

```{r}

# Calculation of number of analysts
Analysts <- New_analysts_January + New_analysts_February

Analysts

```

### Errors

Throughout the course we will talk about R runtime errors, but it is worth getting used to them, as they will always be with us ðŸ˜¢, but they give us a guide to solve them ðŸ˜Š


```{r errorexample}
#| eval: false

## analyst_number_calculation
Analysts_update <- New_analysts_January + New_analysts_February + New_analysts_March

Analyst_update

```

## Libraries

Libraries or packages are perhaps the most commonly used elements in R for practical work.

A formal definition of a library from the book [R Packages](https://r-pkgs.org/) by Hadley Wickham and Jennifer Bryan is as follows:

"*In R, the fundamental unit of shareable code is the package. A package bundles together code, data, documentation, and tests, and is easy to share with others. As of March 2023, there were over 19,000 packages available on the Comprehensive R Archive Network, or CRAN, the public clearing house for R packages*".

An R package is a way to share code in an organised way that expands the possibilities of R by extending its functionality.

Libraries are installed using the `install.packages()` command, and libraries are loaded with `library()`.

```{r libreria}
#| eval: false

install.packages(emoji)
library(emoji)


```

## Basic types in R ([Data Types](http://www.statmethods.net/input/datatypes.html))

In order to work with data, it is necessary to understand how data is stored in the computer by each programming language.

The structures that store numerical information, and the way they are accessed, differ from Python to R, or from R to other languages.

The most important family of variable types in R are vectors, which can be classified as either atomic or list.


The common data objects in R are:

+ Vectors: one dimensional array 
  + Types: numeric, integer, character, factor, logical
+ Matrices: two dimensional array
  + Each column must have the same type
+ **Data Frames**: two dimensional array
  + Columns may have different types
+ Lists
  + Items don't need to be the same size.

The structure of atomic vectors is as follows:

::: {#fig-style}
![](images/summary-tree-atomic.png){width=300}


Atomic vectors. Source: [Advanced R](https://adv-r.hadley.nz/index.html)
:::


```{r types}

Number <- 1.0 # (real, floating)
Integer <- 1
Character <- "ab"   
Logical <- TRUE  

Number
Integer
Character
Logical

```

Be careful when working with different types

```{r types2}
#| eval: false

Number + Character

```

When we perform an operation with two different numeric types (real + integer), R *forces* (coerces) the result to the type with the highest precision, in this case the real type.

```{r types3}

Sum <- Number + Integer

Sum

typeof(Sum)

```

Several things here, we've had our first approximation to a function in R, a topic we'll explore in more detail later. Like the intuitive idea we have of a function from high school mathematics, a function in R has an argument (variable in parentheses) and gives us a result.

In R, functions have their name followed by parentheses, where we place the argument variable(s): `a_function(x)`.

The `typeof()` function tells us the type of the variable (numeric, integer or logical).

```{r types3-5}

typeof(Number)
typeof(Integer)
typeof(Character)
typeof(Logical)

```

There are also specific functions to determine whether a variable is of a specific type

```{r types4}
is.numeric(Number)
is.integer(Integer) 
is.character(Character)
is.logical(Logical)
```

We see that R tells us that `Integer` is not an integer, to specify an integer we have to put a letter L at the end of the number

```{r types5}
Integer_2 <- 1L
Integer_2
is.integer(Integer_2)
typeof(Integer_2)

```

### Vectors

We are going to use R to analyse data and create statistical or algorithmic models from it.

Most data is represented in *tables*: spreadsheets, relational databases tables, .csv files, etc.

Most statistical models use as input data in table form.

The most commonly used objects for working with tables in R are **data frames** and other variants (tibble or data.tables for example).

Before understanding how to work with tables, let's review the concept of vector, which is the basic type on which data frames are built.

What characterises a vector is that it can store only data of the **same type**.

```{r vectors}

vector_numeric <- c(1, 10, 49)
vector_character <- c("a", "b", "c")

vector_numeric
vector_character

```

Vectors are one-dimensional arrays (row or column) that can store numbers, characters or logical variables.

As we have seen above, vectors are created with the `c()` command where the c stands for *combine*.

**Be careful not to confuse** this structure with vectors as elements of a vector space (more on this later).

```{r vectors2}

vector_mixed <- c(1,2, "a")
vector_mixed

```

In the previous example we wanted to create a vector with elements of different types, numeric and character. R has converted all the elements to character.

If there are characters in a vector R converts all the elements to character, if they are all numeric but of different types, R converts them to the type with the highest precision (double). What happens with logical vectors?

```{r vectors3}

vector_mixed2 <- c(1,2,TRUE)
vector_mixed2
typeof(vector_mixed2)

```

In this case R has converted the elements of the vector to numeric.

We observe something that later will be very useful, R has assigned to the logical variable `TRUE` the number 1. The variable `FALSE` has been assigned a zero.

Can we change a variable or a vector type? YES

```{r vectors4}

vector_numeric

as.character(vector_numeric)

logic_vector <- c(TRUE, FALSE)

logic_vector

as.numeric(logic_vector)

```

There are several functions in R that allow for changes of type

```{r vectors4_5}
as.character(logic_vector)

```


There are a couple of other ways to create vectors

```{r vectors5}

vector_1 <- 1:5

vector_2 <- seq(1,5)

vector_1

vector_2


```

where `seq` stands for sequence

Since in this course the data we will use is external and not generated by us, we will not go into the different ways of generating vectors. The following box elaborates in more detail on this topic and is optional, you can follow the rest of the lecture without reading it.

::: {.callout-note}

More complex sequences can be created with the `seq()` function.

```{r vector6}

vector_3 <- seq(1,10, by = 2)

vector_4 <- seq(1,10, length.out = 20)

vector_5 <- seq(1,10, along.with = vector_1)

vector_3

vector_4

vector_5

```


Another command to generate sequences is ``rep``.

```{r vectors8}

repeated <- rep(4,10)

repeated

```

We can repeat not only a value but vectors

```{r vectors9}

repeat_2 <- rep(1:4, 4)

repeat_2

repeat_3 <- rep(1:4, each = 4)

repeat_3

repeat_4 <- rep(1:4, each=2, times=2)

repeat_4

repeat_5 <- rep(1:4, c(2,3,4,5))

repeat_5

```

We can also create *random* vectors, i.e., realisations of a random variable from a given distribution

```{r vectors10}

random_normal <- rnorm(10)

random_uniform <- runif(10)

random_normal

random_uniform

```

:::

The elements of the vector can be assigned names

```{r vectors7}

names(vector_1)

names_vec <- c("one", "two", "three", "four", "five")

names(vector_1) <- names_vec

names(vector_1)

```

Another characteristic of vectors besides their type, is their **length** or dimension, which we can determine with the `length()` function.

```{r length}

length(vector_1)

length(vector_4)

length(repeat_5)

```

#### Arithmetic operations with vectors

Arithmetic operations can be performed with vectors

```{r vectors10_1}

vector_1

vector_2

Vec_sum <- vector_1 +vector_2

Vec_sum

```

```{r vectors11}
vector_1

vector_2

Vec_product <- vector_1 * vector_2

Vec_product


```

In this case, both vectors have the same dimension. What happens if the opposite is true?

```{r vectors11_1}

vector_1 

seq(6,15)

vector_1 + seq(6,15)


```

This peculiar behaviour is called **recycling**. Observe the result: what has R done in this case?


#### Vectorisation of operations

An operation is said to be vectorised if it can be applied to all elements of a vector.

```{r vectorisation}

vector_numeric

vector_numeric + 2

vector_numeric * 2

vector_numeric / 2

vector_numeric^2

sqrt(vector_numeric)

log(vector_numeric)


```

We note that when an arithmetic operator (`+`, `*`, `-`, `/`, `^`) is applied to a vector, the operation is performed on each of the elements of the vector. Similarly, when we apply a function (`sqrt()`, `log()`) it uses all the elements of the vector as arguments and its output is a vector of dimension equal to the dimension of the original vector. 


#### Vector inspection

It is possible to apply certain functions to analyse some characteristics of vectors.

Remember that the ultimate goal is to perform data analysis, some of these functions will be used on a regular basis when we want to inspect data in a table. 

Basic statistics of a vector

```{r inspect1}

summary(vector_4)

```


Values at the beginning and at the end

```{r inspect2}

head(vector_4)

tail(vector_4)

```


#### Selections

It is possible to construct new vectors from a vector

```{r select1}

vector_1

vector_square <- vector_1^2

vector_square

```

How do we access the elements of a vector?

```{r select2}

vector_square[1]

vector_square[3]

```

Several elements in a row (slice)

```{r select3}

vector_square[1:3] 

vector_square[3:1]

```

Non consecutive elements of a vector

```{r select4}

vector_square[c(1,3)]

vector_square[c(3,1)]

```

All elements except some

```{r select5}

vector_square[-c(1,3)] 

vector_square[-length(vector_square)]

```

All elements satisfying a condition

```{r select6}

vector_5

vector_5[vector_5 < 5]

vector_5[vector_5 > 5]

```

The condition can be an equality

```{r select7}

vector_5[vector_5 == 5.5]

```

These conditions are very important for data analysis. Suppose you want to locate in a table with the financial data from a sample of bank costumers, those customers whose income is greater than 30,000 per year.

It is also useful to locate data and replace it with another value. Following the example above, replace the income column for customers whose annual income is less than 12,000 per year with zero, as we will not be working with that segment.

```{r select8}

vector_5

vector_5[vector_5 < 5] <- 0

vector_5

```

In case the vectors have names, we can use these to select elements 

```{r select9}

vector_square["two"]

vector_square[c("one", "three")]

```

More functions applied to vectors

```{r select10}

vector_5 <- seq(1,10, along.with = vector_1)

vector_5

max(vector_5)

min(vector_5)

sum(vector_5)

prod(vector_5)

```

### Matrices

So far we have been working with a one-dimensional data structure, but in data analysis we are sometimes interested in *discovering* or finding relationships between variables, so it is necessary to look at them as a whole in order to capture interrelationships.

In our particular case, we will represent subsets of the input output table as matrices, and apply linear algebra operations to them.

This forces us to have to work in more than one dimension, in R we can do that with **matrices** and **arrays**.

A matrix is nothing more than a two-dimensional structure that allows us to store homogeneous data. To construct a matrix we use the `matrix()` function

```{r matrices}

vector_6 <- seq(8)

vector_6

A <- matrix(vector_6)

A


```

We have a one-column vector. What if we want more than one dimension?

```{r matrix2}

A <- matrix(vector_6, nrow = 2)

A


```

```{r matrices3}

A <- matrix(vector_6, ncol = 2)

A

```


```{r matrices4}

A <- matrix(vector_6, nrow = 4, ncol = 2)

A

```


We notice that the matrix is *filled* by columns, we can change that behaviour

```{r matrices5}

A <- matrix(vector_6, nrow = 4, ncol = 2, byrow = TRUE)

A

```

Just as we had the name attribute for vectors, we can also name the rows and columns of a matrix. To inspect the row names of a matrix we use `rownames()`, and the row names `colnames()`.


```{r arrays6}

rownames(A)
colnames(A)

```


NULL indicates when an expression or function results in an undefined value. In this case it indicates that the array has no names. Let's assign names to it by associating a vector of characters

```{r arrays7}

rownames(A) <- c("row_1", "row_2", "row_3", "row_4")
colnames(A) <- c("column_1", "column_2")

rownames(A)
colnames(A)

A

```

``dimnames()` is another way to inspect/assign the names of an array. 

```{r arrays8}

dimnames(A)

```

Is there anything strange about this structure? There are *lists*, a topic that we will not be covered in this course.

Accessing the elements of an array is very similar to the case of vectors, we just need to differentiate between dimensions with a comma `,`.

```{r arrays9}

A

A[1,1]

A[3,2]

A["row_2", "column_2"]

A[1:2, 1]

A[c("row_1", "row_4"), 2]

```

One operation that is widely used in practice is to create a new *table* from another by binding rows and columns. This is done with the `rbind()` and `cbind()` functions.

If we want to add columns based on another matrix:


```{r matriz41}

set.seed(125)

matrix_A <- matrix(data = runif(n = 8, min = 10, max = 50), nrow = 2, ncol = 4)

matrix_B <- matrix(data = runif(n = 2, min = 10, max = 50), nrow = 2, ncol = 1)

matrix_A

matrix_B

```

We combine both matrices

```{r matriz42}

matrix_AB <- cbind(matrix_A, matrix_B)

matrix_AB

```


If we want to add rows based on another matrix:

```{r matriz51}

matrix_C <- matrix(data = runif(n = 5, min = 10, max = 50), nrow = 1, ncol = 5)

matrix_C

matrix_ABC <- rbind(matrix_AB, matrix_C)

matrix_ABC

```

As mentioned before, matrices are objects that can be manipulated as matrices in the sense of linear algebra. For example, we can calculate the transpose or the inverse of a matrix

Transpose

```{r matrix6}

A

t(A)

```

Inverse

```{r matrix6_5}

A

solve(A[1:2,1:2])

```

Diagonal

```{r matrix7}

vector_diagonal <- c(1,2,3,4)

diag(vector_diagonal)

```

In this case

```{r matrix8}

diag(4)

```

The `diag(n)` command generates a square diagonal matrix of ones whit dimension n

The `%*%` operator performs products of matrices, as we will see in the practical examples

::: {.callout-note}

Use the help to determine what the following linear algebra functions do

`det()`, `svd()`, `eigen()`, `qr()`, `chol()`

:::

## Data Frames

The `data.frame` will be one of the most commonly used objects in R for data analysis.

Data frames are *tables* or rectangular arrays, we can treat them as if they were an Excel sheet in which we organise the data we want to analyse.

As in Excel, we can do calculations with the tables, create new columns (variables), perform statistical analysis, etc.

### Inspecting the data

In general, we usually inspect the data in a table to familiarise ourselves with it and see what kind of analysis we can do with it.

Let's use one of the datasets that already comes with the basic R installation, `mtcars`.

We can view a user friendly version of the table in RStudio

```{r df1}

mtcars

```

There are several ways to take a quick look at the data without having to view the whole table.

For example we can see the first 6 rows

```{r df2}

head(mtcars)

```

Or the last 6

```{r df3}

tail(mtcars)

```

If instead of 6, we want to see a certain number of rows, we simply tell the `head` and `tail` functions to do so

```{r df4}

head(mtcars, n = 3)

tail(mtcars, n = 2)

```

Sometimes we use very large tables that store many variables, in this case before displaying even a fraction of the table, it is useful to inspect the column names of the data frame

```{r df5}

colnames(mtcars)

```


In general, in order to determine how many variables and how many observations we have, we use the `dim` function, which gives the number of columns and rows in the table

```{r df6}

dim(mtcars)

```

We can see the number of rows and columns separately with `nrow` and `ncol`.

```{r df7}

ncol(mtcars)

nrow(mtcars)

```



Another way is to use the `str` function. Although it is not intuitive and even intimidating at first glance, it is not that complicated and provides useful information. 

```{r df8}

str(mtcars)

```

A version that provides statistical information is ``summary``.

```{r df9}

summary(mtcars)

```


Now that we have our data in a data frame, the next step is to access subsets of data in the table (a column or group of rows that meet a condition), manipulate it and create new variables.

We can access the data in the data frame in the same way as we did with vectors, data frames are a kind of set of vectors.

Remember that we could access elements of vectors by position or name

```{r df12}

mtcars[1,2]

mtcars[1,4]

```

In the first case we tell R that we want it to show us the data of the first row and the second column, in the second case the data of the first row and the fourth column.

In the case that we want to see a specific column or row, we leave one of the dimensions blank.

If we want to access the information of the second row

```{r df13}

mtcars[2, ]

```

If we want to access the information in the fourth column

```{r df14}

mtcars[ , 4]

```

We can also get the information per column using the column name

```{r df15}

mtcars[ , "cyl"]

```

Likewise, we can inspect a data frame column by typing the data frame name followed by a `$` sign and the column name.

The advantage of this method is that the column names are autocompleted

```{r df16}

mtcars$cyl

```

With position, like vectors, we can access sets of rows and columns (slices).

For example, if we want to keep only the first 3 rows and the fourth and fifth columns, we can access the following position sets

```{r df17}

mtcars[1:3, 4:5]

```

We can build a new table from this sub-table, assigning a name to the latter

```{r df18}

mtcars_peque <- mtcars[1:3, 4:5]

mtcars_peque

```

Sub-table with first 10 rows only

```{r df19}

mtcars[1:10, ]

```

Sub-table with last 2 columns only

```{r df20}

mtcars[, 4:5]

```


We can select data with criteria based on meeting a condition

```{r df21}

mtcars[mtcars$cyl > 4 , ]

```

```{r df22}

mtcars[mtcars$cyl == 6 , ]

```

We can complicate it

```{r df23}

mtcars[mtcars$cyl == 6 & mtcars$mpg > 18, ]

```

We have asked R to show us the data in the table corresponding to cars with 6 cylinders and miles per gallon greater that 18.

Both conditions are fulfilled at the same time.

In case you need that only one of the condition holds:

```{r df23_1}

mtcars[mtcars$cyl == 6 | mtcars$mpg > 18, ]

```


## Read and write data in R

As mentioned earlier, instead of *generating* the data we will be analysing, we typically obtain the data from external sources. In our case, the input-output tables are generated by the national statistical institutes.

These tables are shared in various formats, such as Excel or flat files (mainly csv). It is advisable to prioritize the use of flat files.

Similarly, we will also want to save the data generated in R in a format that can be read in other platforms, such as Excel.

### Reading data in R

In this presentation we will focus on two formats: Excel and csv.

#### csv files

The R base function for reading csv files is `read.csv()`.

We need to provide the function with the file's location path.

```{r csv01}
#| eval: false

mtcars_csv <- read.csv(file = "mtcars.csv")

head(mtcars_csv)

```

Inspecting the function, we can find additional arguments. Let us explore them using the tab button.

In practice, we typically use the arguments  `header`, `sep` and `dec`

#### xlsx files

Base R does not have a function to read Excel files, so we must rely on a library. The most common choice is the `readxl` package. 

Once we load the library, we will use the function `read_excel()`

```{r xlsx01}
#| eval: false

library(readxl)

mtcars_excel <- read_excel("mtcars.xlsx")

head(mtcars_excel)

```

In the practice section, we will use some of the other arguments of the read_excel() function. It's worth mentioning the skip argument, which is used if we don't wish to read the first n lines of an Excel file.

### Writing data in R

Unsurprisingly, we write data from R using the functions `write.csv()` and `write_xlsx()`

We must provide both functions with the object (data frame) we wish to save and the file path.

```{r xlsx02}
#| eval: false

write.csv(x = airquality, file = "my_airquality.csv")

library(writexl)

write_xlsx(x = airquality, path = "my_airquality.xlsx")

```


# Input Output Analysis

We will use as an example a input output table of Belgium with 10 sectors

## Read the data

We have our input-output table in Excel format. In order to manipulate this data in R, we must have an R object in memory.

When we read data from an Excel or csv file, this object is loaded as a data frame.

```{r io01}

BE_Z <- read_xlsb(path = "figaroIO/FIGARO_ICIOI_23ed_2021.xlsb",
                  sheet = "BE",
                  range = "C12:L22")

BE_Ytemp <- read_xlsb(path = "figaroIO/FIGARO_ICIOI_23ed_2021.xlsb",
                      sheet = "BE",
                      range = "M12:R22")

BE_X <- read_xlsb(path = "figaroIO/FIGARO_ICIOI_23ed_2021.xlsb",
                  sheet = "BE",
                  range = "S12:S22")

```


## Technical coefficients matrix

Let's revisit the representation of interindustry production relations using the interindustry sales matrix $Z$ and the final demand vector $y$ as a system of linear equations in matrix form:

$$x=Zi+y$$
In this equation, $Z$ represents the interindustry sales matrix, $i$ is a column vector of ones, and $y$ is a vector representing the final demand by industry.

We can define the technical coefficient $a_{ij}$ as:

$$a_{ij}=\frac{z_{ij}}{x_j}$$

Here, $z_{ij}$ represents the value of interindustry sales between industries $i$ and $j$, and $x_j$ represents the value of production in industry $j$.

Using the technical coefficient definition, we can rewrite $z_{ij}$ as $z_{ij}=a_{ij}x_j$, which can be represented in matrix notation as:

$$x=Ax+y$$

Where $A$ represents the technical coefficient matrix.

Once we have our input-output data loaded in R, the next step is to construct our $Z$ and $A$ matrices. While our data may initially be loaded as data frames in R, it's important to note that we need to convert them to matrices in order to perform matrix algebra operations. Therefore, our first task is to convert the data frames to matrices.


```{r io2}
#| output: false

Z <- as.matrix(BE_Z)

```

We add names to the matrix rows

```{r io21}
#| output: false

rownames(Z) <- colnames(Z)

```

Next, we repeat this process with the output vector. Specifically, we need to extract the output column from the `BE_X` data frame and transform it into a vector, as opposed to a one-dimensional matrix. It's important to note the distinction, as using a vector in this context is more appropriate for the calculations we will be performing.


```{r io22}
#| output: false

x <- as.vector(BE_X$X)

```

We now have all the necessary elements to compute the technical coefficients matrix.

```{r io23}
#| output: false

A = Z %*% diag(1 / x) 

colnames(A) <- rownames(A)

```


## Leontief inverse

From the equation $x=Ax+y$, we can derive an expression that informs us of the output required to meet a given exogenous level of final demand:


$$x=(I-A)^{-1}y$$

where $(I-A)^{-1}$ is known as the *Leontief inverse* or the total requirements matrix.

We compute the Leontief inverse in R:


```{r io3}
#| output: false

#Number of sectors
n <- length(x) 

#Identy matrix
I <- diag(n) 

#Leontief inverse
B <- solve(I - A) 

```

## Multipliers

Applying the change operator $\Delta$ to both sides of the expression $x=(I-A)^{-1}y$ we obtain

$$\Delta x=(I-A)^{-1}\Delta y$$
Next, let's consider the relationship between a unit change in the demand vector $\Delta y$ and the resulting change in production $\Delta x$, which can be expressed as $(I-A)^{-1}$.
Let's define $B=(I-A)^{-1}$.

The matrix $B$ enables us to calculate the increase in the production of each sector in response to changes in exogenous factors, such as variations in final demand


```{r io4}
#| output: false

#Number of sectors
n <- length(x) 

#Identy matrix
I <- diag(n) 

#Leontief matrix
B <- solve(I - A) 

```

### Interpretation

For instance, let's compare the interpretation of the elements of $A$ and $B$, such as the elements in the first and second rows and the first column of matrix $A$

```{r io5}

A[1, 1]
A[2, 1]

```

The element $A_{1,1}$ indicates that in order to produce 1 unit of output in the agriculture, forestry, and fishing industry, `r A[1, 1]` units of the agriculture, forestry, and fishing industry are required.

Similarly, the element $A_{2,1}$ tells us that to produce 1 unit of output in the agriculture, forestry, and fishing industry, `r A[2, 1]` units of the mining and quarrying industry are needed.

By summing the columns of matrix $A$, we can obtain the *direct effect* of a unitary change in the demand for the product in a specific industry

```{r io52}

direct <- colSums(A, na.rm = TRUE)

direct

direct[which.max(direct)]
sort(direct, decreasing = TRUE)

```

These numbers do not account for the feedback loops generated by the interdependence between sectors.

The matrix $B$ incorporates the *indirect* effect stemming from the fact that industries supplying the agriculture sector, for instance, also require inputs from other industries.

By summing the columns of matrix $B$, we obtain the *direct + indirect effects* of a unitary change in the demand for the product in a specific industry.

For example, let's consider the elements in the first and second rows and the first column of matrix $B$


```{r io53}

B[1, 1]
B[2, 1]

```

The element $B_{1,1}$ indicates that in order to meet a 1 unit increase in demand for agriculture, forestry, and fishing industry products, `r B[1, 1]` units of agriculture, forestry, and fishing industry input are required. This includes the additional unit itself, as well as `r B[1, 1] - 1` units needed as input for other sectors.

Similarly, the element $B_{2,1}$ shows that to satisfy a 1 unit increase in demand for agriculture, forestry, and fishing industry products, `r B[2, 1]` units of mining and quarrying industry input are necessary.

By calculating the column sums of matrix $B$, we can determine the *multiplier* for industry $j$, which represents the total value of production in all industries required for all stages of production in order to produce one unit of product $j$ for final use in the economy

```{r io54}

total <- colSums(B, na.rm = TRUE)

total[which.max(total)]
sort(total, decreasing = TRUE)

```


## Closed model

So far, the model we have been dealing with treats the household sector as completely exogenous. This approach does not consider the feedback effects of this sector in response to an initial increase in demand.

When the production of a given sector increases, it can stimulate the demand for labor, leading to higher income earnings and potentially expanding consumer consumption. This generates additional rounds of spending that are not accounted for in the previous section's analysis.

To incorporate the household sector into the $x=(I-A)^{-1}y$ model, we expand the $A$ matrix by including the household sector's final demand column and the labor input row in the following manner

$$\begin{bmatrix}
\mathbf{x} \\
x_{n+1}
\end{bmatrix} = \begin{bmatrix}
\mathbf{A} &  \mathbf{h_c} \\
\mathbf{h_r} & 0
\end{bmatrix} \begin{bmatrix}
\mathbf{x} \\
x_{n+1}
\end{bmatrix} + \begin{bmatrix}
\mathbf{y} \\
y_{n+1}
\end{bmatrix}$$

where $\mathbf{h_c}$ represents the consumption coefficients (household consumption by sector divided by the total labor remuneration) and $\mathbf{h_r}$ represents the labor earnings by sector divided by the sector's output.

We will now proceed to load these additional elements into our R environment

```{r io6}

BE_C <- read_xlsb(path = "figaroIO/FIGARO_ICIOI_23ed_2021.xlsb",
                  sheet = "BE",
                  range = "N12:N22")

c <- as.matrix(BE_C$P3_S14) 

BE_R <- read_xlsb(path = "figaroIO/FIGARO_ICIOI_23ed_2021.xlsb",
                  sheet = "BE",
                  range = "C27:L28")

```

We rearrange the labor earnings vector

```{r io61}

rTemp <- t(BE_R) 
r <- as.matrix(rTemp)

```

Compute the consumption and earnings coefficients

```{r io62}

hc <- c / sum(r) # Consumption coefficient

hr <- r / x # Earnings coefficient

hr <- t(hr) # Transpose

```

Build the  $\begin{bmatrix} \mathbf{A} &  \mathbf{h_c} \\ \mathbf{h_r} & 0 \end{bmatrix}$ matrix

```{r io63}

AF <- matrix(NA, ncol = n + 1, nrow = n + 1)  # A Matrix for the closed model
AF <- rbind(cbind(A, hc), cbind(hr, 0)) # Technical coefficients matrix

```

Compute the Leontief inverse matrix for the closed model

```{r io64}

IF <- diag(n + 1) # Identity (n+1)x(n+1)

BF <- solve(IF - AF) # Leontief inverse matrix

```

Obtain the multipliers

```{r io65}

totalF <- colSums(BF[,1:n], na.rm = TRUE)

total[which.max(total)]
sort(total, decreasing = TRUE)


```






