---
title: "Programación y Entorno de Trabajo para la IA: R"
author: "Kamal Romero"
date: "`r format(Sys.time(), '%m %d, %Y')`"
format:
  html: 
    toc: true
    toc-depth: 3
    toc-location: left
---

```{r libraries}
#| echo: false
#| warning: false

#Vamos a cargar las librerías con "pacman"

#Verificamos si esta instalado la libreria pacman, en caso que no lo este, se instala
if (! ('pacman' %in% installed.packages())) install.packages('pacman')

#Una vez instalada, este comando carga la libreria, y si no esta instalada, lo hace
pacman::p_load(wooldridge, dplyr, purrr, data.table, ggplot2, AER)

```


## Data frames

Gran parte de los datos con los que trabajamos en el mundo de la ciencia de datos, están organizados en arreglos rectangulares, donde las filas representan las instancias, individuos u objetos de estudio, y las columnas las características de los mismos.  Esto implica que por definición, dado que las unidades de estudio se representan como entes multidimensionales, que las filas son heterogéneas (una fila es un individuo caracterizado, por ejemplo, por su edad, código postal de su residencia, saldo de su cuenta bancaria, etc.), y las columnas son homogéneas (la columna de edad son todos enteros si se representan en años) 

En R, el contenedor usado para poder realizar análisis sobre datos rectangulares, son los data frames.

Formalmente hablando, los data frames son **listas de vectores** de igual magnitud. Por lo que todo lo que hemos aprendido en las secciones anteriores, es aplicable a los data frames

### Inspeccionar los datos

Por lo general, solemos inspeccionar los datos de una tabla para familiarizarnos con ellos y ver que tipo de análisis podemos realizar con ellos.

Vamos a usar uno de los conjuntos de datos que ya viene en la instalación básica de R, `mtcars`


Podemos abrir una versión amigable de la tabla en RStudio

```{r df1}

mtcars

```

Existen varias formas de echar vistazos rápidos a los datos sin necesidad de visualizar la tabla entera

Por ejemplo podemos ver las 6 primeras filas

```{r df2}

head(mtcars)

```

O las 6 últimas

```{r df3}

tail(mtcars)

```

Si en lugar de 6, queremos ver un determinado número de filas, simplemente se lo decimos a las funciones `head`y `tail`

```{r df4}

head(mtcars, n = 3)

tail(mtcars, n = 2)

```

En el caso en que tengamos muchas columnas, la inspección visual es engorrosa, pero, al igual que las listas, si un data frame es una lista de vectores, donde los vectores son las columnas, podemos acceder a los nombres de las columnas usando `names()`

```{r df5}

names(mtcars)

```


Asimismo, un data frame es un objeto rectangular, es decir, con más de una dimensión, como una matriz, por lo que podremos obtener el número de filas y columnas con `dim()`

```{r df6}

dim(mtcars)

```

Podemos ver por separado el número de filas y columnas con `nrow` y `ncol`

```{r df7}

ncol(mtcars)

nrow(mtcars)

```


Otra forma es usando la función `str`. Aunque no es intuitiva e incluso intimida a primera vista, no es tan complicado y aporta información útil 

```{r df8}

str(mtcars)

```

Una versión que aporta información estadística es `summary`

```{r df9}

summary(mtcars)

```

Recordar que podíamos acceder a elementos de los vectores por posición o nombre

```{r df12}

head(mtcars, n = 1)

mtcars[1,2]

mtcars[1,4]

```

En el primer caso le decimos a R que queremos que nos muestre el dato de la primera fila y la segunda columna, en el segundo caso el dato de la primera fila y cuarta columna

En el caso que deseemos ver una columna o fila específica, dejamos una de las dimensiones en blanco

Si queremos acceder a la información de la segunda fila

```{r df13}

mtcars[2, ]

```

Si queremos acceder a la información de la cuarta columna

```{r df14}

mtcars[ , 4]

```

Tambien podemos obtener la información por columna usando el nombre de la misma

```{r df15}

mtcars[ , "cyl"]

```

Asimismo, podemos inspeccionar una columna de data frame escribiendo el nombre del mismo seguido de un signo `$` y el nombre de la columna

La ventaja de este método es que los nombres de la columna se autocompletan

```{r df16}

mtcars$cyl

```

Con la posición, al igual que los vectores, podemos acceder a conjuntos de filas y columnas (slices)

Por ejemplo, si nos queremos quedar solo con las 3 primeras filas y la cuarta y quinta columna

```{r df17}

mtcars[1:3, 4:5]

```

### Manipulación de data frames

Podemos añadir columnas a un data frame, usemos una versión reducida de `mtcars`

```{r df18}

(mtcars_mini <- mtcars[1:10, ])

```

Creamos un vector (con nombre) de caracteres de longitud 10

```{r df18_5}

( nueva_columna <- letters[1:10] )

```

Añadimos este vector como una nueva columna a `mtcars_mini`

```{r df19}

mtcars_mini$new <- nueva_columna

mtcars_mini

```

Como un data frame es un arreglo rectangular que nos permite utilizar funciones que hemos empleado antes con las matrices, otra forma de añadir una nueva(s) columna(s) es usando la función `cbind()`


```{r df20}

( new2 <- letters[11:20] )

( mtcars_mini <- cbind(mtcars_mini, new2) )

```

Asimismo podemos usar `rbind()` para añadir nuevas filas al data frame


```{r df21}

( rbind(mtcars_mini[, 1:(ncol(mtcars_mini)-2)], mtcars[11:15, ]) )

```

Prestar atención a lo que hemos hecho para poder adaptar mtcars_mini al número de columnas del sub conjunto de mtcars. 

Para aplicar la función `cbind()`hay que asegurarse que los data frames tengan el mismo número de filas, y para `rbind()` que tengan el mismo número de columnas.

Si queremos cambiar el orden de las columnas pasamos un vector de caracteres como máscara en la dimensión de columnas como máscara.

```{r df22}

orden_nuevo <- c("carb", "mpg",  "cyl",  "disp", "hp", "drat", "wt", "qsec", "vs",  "am", "gear")

mtcars[, orden_nuevo]

```

Si deseamos crear una nueva columna a partir de otras

```{r df23}

mtcars_mini$mpgOvercyl <- mtcars_mini$mpg / mtcars_mini$cyl

mtcars_mini

```


Y  podemos filtrar filas usando condiciones lógicas al igual que hacíamos con los vectores

```{r df24}

mtcars[mtcars$cyl > 4 & mtcars$hp > 100, ]

```

```{r df25}

mtcars[mtcars$cyl > 4 | mtcars$hp < 100, ]

```

```{r df26}

mtcars[mtcars$cyl == 6, ]

```

# Beyond Data Frames

Data frames are an extremely useful structure with the significant advantage of being part of the base R ecosystem, meaning they do not rely on third-party libraries. However, this also poses certain limitations, which has led to the development of libraries that enhance and extend the capabilities of data frames.

## The Tidyverse Universe

::: {#fig-tidyverse}
![](tidyverse_website.png)

Collection of packages from the Tidyverse ecosystem. See their [website](https://www.tidyverse.org/)
:::

The main reference for this section will be this [chapter](https://r4ds.had.co.nz/transform.html) from the book [R for Data Science](https://r4ds.had.co.nz/index.html).

In this first part of the presentation, we will focus on the [dplyr](https://dplyr.tidyverse.org/) package for data manipulation and introduce the pipe command

### Dplyr

::: {#fig-dplyr}
![](logo.png){width=200}

dplyr hex sticker
:::

On its website, the dplyr library is presented as “*dplyr is a grammar of data manipulation, providing a consistent set of verbs that help you solve the most common data manipulation challenges.*”


The “set of verbs” is as follows:

* `mutate()` adds new variables that are functions of existing variables
* `select()` picks variables based on their names.
* `filter()` picks cases based on their values.
* `summarise()` reduces multiple values down to a single summary.
* `arrange()` changes the ordering of the rows

Being a third-party library, you need to install the library (done only once) and load it.

```{r dplyr01}
#| eval: false

install.packages("dplyr")
library(dplyr)

```


We will work with the `starwars` dataset.

```{r dplyr02}

starwars

```

Notice that our data frame has changed its name, it is now a tibble.  

Notice that our data frame has *changed* its name, it is now a `tibble`. Read this chapter from the  [book](https://es.r4ds.hadley.nz/10-tibble.html) for a detailed explanation.

We inspect the data frame (yes, the tibble is still a data frame) with `glimpse`


```{r dplyr03}

glimpse(starwars)

```

Before continuing, it is helpful to introduce the *pipe*. We will start with a simple example: calculating the logarithm of the square root of the sum of a sequence of 20 realizations from a uniform distribution.

The steps would be as follows:

* Generate the sequence of 20 realizations of a uniform distribution `runif(20)`
* Calculate the sum `sum(runif(20)))`
* Compute the square root `sqrt(sum(runif(20)))`
* Apply the logarithm `log(sqrt(sum(runif(20))))` 


```{r dplyr04}

set.seed(356)
log(sqrt(sum(runif(20))))

```

The function is somewhat difficult to read, and it becomes even more complex as we add more functions.

The R **pipe** `|>` (with the magrittr library offering its version `%>%`) operates similarly to the bash pipe `|`, passing the output of one function to the next in a chained manner.

A “clean” way to execute multiple verbs sequentially is through the use of the pipe.

According to its website, this tool makes our code more readable for the following reasons:

* Structuring sequences of data operations from left to right (instead of inside out)

* Avoiding nested function calls

* Minimizing the need for local variables and function definitions

* Making it easier to add steps at any point in the sequence of operations

The previous operation would look like this with pipes:


```{r dplyr05}

set.seed(356)

runif(20) |> 
  sum() |> 
  sqrt() |> 
  log()


```

This approach is more natural and easier to read. We will apply this intensive function chaining with the pipe in dplyr.




We will select rows that meet a certain condition using the `filter()` verb.

For example, we will only keep the Star Wars characters who are from Tatooine.


```{r dplyr06}
starwars |> 
  dplyr::filter(homeworld == "Tatooine")


```

Or who live on Tatooine and are male

```{r dplyr07}
starwars |>
  dplyr::filter(homeworld == "Tatooine" & gender == "masculine") 

```


Or we want to keep those records that are not human

```{r dplyr08}

starwars |> 
  dplyr::filter(species != "Human")

```
If we want to select columns, we use the verb `select()`

Continuing with the first example, we want to know which Star Wars characters are from Tatooine, but we only want to see the name column

```{r dplyr09}

starwars |> 
  dplyr::filter(homeworld == "Tatooine") |>
  select(name)


```

In addition to the name, we want to know their height and species

```{r dplyr10}

starwars |> 
  dplyr::filter(homeworld == "Tatooine") |>
  select(name, height, species)

```

Suppose we don't know in advance how many types of species there are, and we need this information to apply appropriate filters. In base R, we would extract the column and use the `unique()` function (`unique(starwars$species)`). In dplyr, we can use the `distinct()` function for this purpose.


```{r dplyr11}

starwars |> 
  select(species) |> 
  distinct()

```

If we want to count the number of records per species, we use the `count()` function.

```{r dplyr12}

starwars |> 
  count(species)

```

Si deseamos que presente la información en orden descendente


```{r dplyr12_5}

starwars |> 
  count(species, sort = TRUE)

```

Si una vez escogida la columna deseada, desea ordenarla como en la caso anterior, usamos el verbo `arrange()`. En este caso seleccionamos la columna de masa corporal y nombre

```{r dplyr13}

starwars |>
  select(name, mass) |>
  arrange(mass)

```

Para ordenarlo de mayor a menos usamos la función `desc()` dentro de `arrange()`

```{r dplyr14}

starwars |>
  select(name, mass) |>
  arrange(desc(mass))

```

Supongamos que deseamos seleccionar solo las columnas que cumplan una determinada condición, esto se puede hacer con la función `where()` dentro del verbo `select()`. Por ejemplo, si deseamos solo las columnas que contengan variables numéricas

```{r dplyr14_2}

starwars |>
  select(where(is.numeric))

```

Pero, también existen variantes de `select()` más específicas. Por ejemplo, para este caso también podríamos haber usado `select_if()` y la condición

```{r dplyr14_3}

starwars |>
  select_if(is.numeric)

```

::: {.callout-note}

Hay varias funciones *helpers* que permiten hacer una selección más fina de columnas. Para echar un vistazo ejecutar `?select`

:::

Algo que solemos realizar de manera muy frecuente, es crear nuevas columnas transformando las existentes, esto lo hacemos con el verbo `mutate()`

```{r dplyr15}

starwars |> 
  mutate(H_W = height / mass)

```

Es posible crear varias columnas al mismo tiempo

```{r dplyr16}

starwars |> 
  mutate(H_W = height / mass,
         fakeVar = sqrt(mass))

```

Y para finalizar este exceso resumido paso por dplyr, presentamos dos verbos de los más usado en el ciclo de análisis de datos: `group_by()` y `summarise()`

Para los que conocen SQL, los dos verbos anteriores son el equivalente a un `GROUP BY` y una operación de agregación 

Por ejemplo, supongamos que queremos obtener la altura media por género

```{r dplyr17}

starwars |> 
  group_by(gender) |> 
  summarise(altura_media = mean(height, na.rm = TRUE))


```

O el peso medio por planeta de origen

```{r dplyr18}

starwars |> 
  group_by(homeworld) |> 
  summarise(peso_medio = mean(mass, na.rm = TRUE))

```

Recordar que lo podemos ordenar

```{r dplyr19}

starwars |> 
  group_by(homeworld) |> 
  summarise(peso_medio = mean(mass, na.rm = TRUE)) |> 
  arrange(desc(peso_medio))

```
Número de registros por planeta ordenado de mayor a menor

```{r dplyr20}

starwars |> 
  group_by(homeworld) |> 
  summarise(registros = n()) |> 
  arrange(desc(registros))

```

Y para finalizar, si deseamos cambiar el nombre de una columna, usamos la función `rename()`, y para cambiar el orden de las columnas `relocate()`

```{r dplyr21}

starwars |> 
  rename(planeta = homeworld)

```

```{r dplyr22}

starwars |> 
  relocate(species, .after = mass)

```

Algo adicional que conviene saber y combina bien con las funciones `map`, los tibbles anidados. Los tibbles anidados se crean con el verbo `nest_by()`

```{r dplyr23}

starwars_nested <- starwars |>
  nest_by(homeworld)

starwars_nested

```

Se accede al tibble anidado con la sintaxis de una lista

```{r dplyr23_5}

starwars_nested$data[[40]]

```


### Más allá de los tibbles: joins

Acabamos esta sección abarcando un problema con el cual ya se han topado en módulos anteriores, el hecho de que es común trabajar con más de una tabla de datos que guardan relación entre si, por lo que recurrimos a los ya conocidos JOINS y sus variantes.

También podemos realizar estas operaciones en tidyverse con las siguientes funciones:

* left_join()

* right_join() 

* inner_join() 

* full_join() 

* anti_join()

* semi_join() 

::: {.callout-note}

Una buena introducción a los joins (uniones) con dplyr es  [esta](https://es.r4ds.hadley.nz/13-relational-data.html#mutating-joins). Y para una comparación con R base y SQL [esto](https://es.r4ds.hadley.nz/13-relational-data.html#otras-implementaciones)

:::

Vamos a usar un ejemplo de juguete para mostrar los joins más básicos. Creamos dos conjuntos de datos usando la función `tibble()`

```{r joins00}

df_A <- tribble(
  ~ID, ~y,
   "A", 5,
   "B", 5,
   "C", 8,
   "D", 0,
   "F", 9)
df_B <- tribble(
  ~ID, ~z,
   "A", 30,
   "B", 21,
   "C", 22,
   "D", 25,
   "E", 29)

df_A

df_B

```


* Left join

```{r joins01}

left_join(x = df_A, y = df_B, by = "ID")

```

* Right join

```{r joins02}

right_join(x = df_A, y = df_B, by = "ID")

```

* Inner join

```{r joins03}

inner_join(x = df_A, y = df_B, by = "ID")

```

* Full join

```{r joins04}

full_join(x = df_A, y = df_B, by = "ID")

```

¿Qué ocurre si las columnas tienen nombres distintos?

```{r joins05}

colnames(df_B)[1] <- "KL"

full_join(x = df_A, y = df_B, by = c("ID"="KL"))

```


## data.table: The need for speed

::: {#fig-datatble}
![](logo4.png){width=200}

Hex sticker de data.table
:::

Ya que nos hemos empapado de parte del tidyverse, vamos a aprender la otra gran alternativa a los data frames estructura de R base, la librería data.table

Antes de empezar a analizar esta librería, primero habría que preguntarse ¿Por qué debemos aprender otras alternativas ya teniendo R base y el tidyverse? 

data.table posee unas ventajas idiosincráticas que la hacen una alternativa atractiva. Según los mismos desarrolladores de la librería, data.table:

“*es un paquete extremadamente rápido y eficiente en memoria para transformar datos en R.*”

Siguiendo a [Carlos Gil Bellosta](https://www.datanalytics.com/bio/), tal y como menciona en su [texto](https://www.datanalytics.com/libro_r/1300_dplyr.html):

“*El tidyverse no es el único dialecto popular de R. Por ejemplo, el paquete data.table propone otro dialecto con características muy distintas. El código en dicho dialecto es mucho menos legible pero tiene una ventaja importante: es increíblemente rápido y gestiona muy bien la memoria. Es un paquete (o dialecto) con el que conviene familiarizarse para trabajar con conjuntos de datos muy grandes, de millones, decenas de millones o, incluso de cientos de millones de filas*”

Y finalizamos con esta afirmación de [Grant McDermott](https://grantmcdermott.com/), profesor de la Universidad de Oregon y consultor de analítica de grandes datos

“_El tidyverse es genial (…) Entonces, ¿por qué molestarse en aprender otro paquete/sintaxis de gestión de datos? En lo que respecta a data.table, se me ocurren al menos cinco razones_:

* _Conciso_ 

* _Increíblemente rápido_

* _Uso eficiente de memoria_

* _Rico en funciones (y estable)_

* _Sin dependencias_”

Mi opinión personal es muy concreta, data.table es muy rápido y eficiente a la hora de manejar una gran cantidad de datos que aún no hayan pasado el límite para convertirse en Big Data.

Pero nada es gratuito, como menciona Gil Bellosta, la sintaxis es menos amigable si la comparamos con la del tidyverse.

La sintaxis de data table se puede resumir mediante el siguiente diagrama:

::: {#fig-tablesintax}
![](datatable.jpg){width=200}

Sintaxis de data.table
:::

* <span style="color:green;">i</span> indica las filas que deseamos seleccionar ya sea para filtrar o para ejecutar una operación sobre ese subconjunto de filas. El equivalente a <span style="color:green;">filter()</span>, <span style="color:green;">slice()</span> y <span style="color:green;">arrange()</span> en dplyr o <span style="color:green;">WHERE</span> en SQL

 * <span style="color:blue;">j</span> indica ya sea las columnas que deseamos seleccionar o la operación que deseamos realizar sobre las columnas. El equivalente a <span style="color:blue;">select()</span>; <span style="color:blue;">mutate()</span> en dplyr o <span style="color:blue;">SELECT</span> o las funciones de agregación en SQL

* <span style="color:red;">by</span> indica como debemos agregar el conjunto de datos. El equivalente a <span style="color:red;">group_by()</span> en dplyr o <span style="color:red;">GROUP BY</span> en SQL

Vamos a replicar los ejemplos de la sección anterior para poder realizar una comparación directa

Primero, instalamos la librería y la llamamos posteriormente

```{r datatable01}
#| eval: false

install.packages(data.table)
library(data.table)

```

Convertimos `starwars` a un objeto `data.table`

```{r datatable02}

starwars_dt <- as.data.table(starwars)

starwars_dt[1:10]

```

Observar que la presentación de la tabla en la consola es distinta a la de un tibble que a su vez era distinta a la de un data frame

Empezamos, nos quedamos solo con los personajes de Star Wars que son de Tatooine


```{r datatable03}

starwars_dt[homeworld == "Tatooine"] |> head()

```

Que viva en Tatooine y sean de género masculino

```{r datatable04}

starwars_dt[homeworld == "Tatooine" & gender == "masculine"]

```

Solo los registros que no sean humanos

```{r datatable05}

starwars_dt[species != "Human"] |> head()

```

También podemos seleccionar filas por posición, por ejemplo las 6 primeras filas

```{r datatable05_5}

starwars_dt[1:6]

```


Ahora seleccionamos columnas, recordar que para eso debemos usar el segundo argumento

```{r datatable06}

starwars_dt[homeworld == "Tatooine", list(name)]

```

Tenemos que pasar los nombres de las columnas como una lista, afortunadamente podemos usar el alias `.`

```{r datatable07}

starwars_dt[homeworld == "Tatooine", .(name)]

```

Si pasamos el nombre solamente, nos devuelve un vector en lugar de un data table

```{r datatable08}

starwars_dt[homeworld == "Tatooine", name]

```

::: {.callout-note}

Pruebe lo anterior con dos columnas, ¿Qué devuelve? ¿Tiene lógica?

Ahora intente con tres columnas ¿Por qué cree que tiene un error?

Intente lo anterior pasando un vector de caracteres con los nombres de las columnas que desea seleccionar

:::

Más columnas

```{r datatable09}

starwars_dt[homeworld == "Tatooine", .(name, height, species)]

```

Si deseamos ordenar el data table según alguna columna en particular

```{r datatable10}

starwars_dt[, .(name, mass)][order(mass)]

```

Observamos dos cosas nuevas:

La primera, si no vamos a realizar una operación sobre las filas, la *casilla* de ese argumento queda en blanco, y en el segundo argumento seleccionamos las columnas.

Lo segundo, una vez seleccionadas las columnas de interés, queremos operar sobre las filas, asi que necesitamos *encadenar* esa operación abriendo unos nuevos corchetes y operando sobre el primer argumento que es de la fila.


Para ordenar de manera descendente

```{r datatable11}

starwars_dt[, .(name, mass)][order(-mass)]

```

Para seleccionar solo las columnas que cumplan una determinada condición, por ejemplo, si deseamos solo las columnas que contengan variables numéricas, la operación es algo más verbosa

```{r datatable12}

starwars_dt[, .SD, .SDcols = is.numeric]

```
Acá introducimos dos elementos nuevos: `.SD` se emplea para hacer sub conjuntos del data table, definidos por las columnas enunciadas en `.SDcols`. A primera vista no es intuitivo, veremos un ejemplo menos trivial

Supongamos que queremos calcular la media de las columnas numéricas

```{r datatable13}

starwars_dt[, lapply(.SD, mean, na.rm = TRUE), .SDcols = is.numeric]

```

O solo a dos columnas

```{r datatable13_5}

starwars_dt[, lapply(.SD, mean, na.rm = TRUE), .SDcols = c("height", "mass")]

```

En data table creamos nuevas columnas transformando las existentes con `:=`

```{r datatable14}

starwars_dt[, H_W := height / mass][] |> head()

```

Es posible crear varias columnas al mismo tiempo

```{r datatable15}

starwars_dt[, `:=` (H_W = height / mass,
                    fakeVar = sqrt(mass))][] |> head()

```

Y para realizar operaciones de agrupación en data table

```{r datatable16}

starwars_dt[, .(altura_media = mean(height, na.rm = TRUE)), by = gender]

```

