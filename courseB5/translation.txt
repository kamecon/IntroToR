Beyond Data Frames
Data frames are an extremely useful structure, with the great advantage of being part of the base R ecosystem (not dependent on libraries developed by third parties). However, this also represents a limitation, which is why libraries have been developed to complement the properties of data frames.

The Tidyverse Universe
-tidyverse


Collection of packages from the Tidyverse ecosystem. See their website

The main reference for this section will be this chapter from the book R for Data Science (available in Spanish)

In this first part of the presentation, we will focus on the dplyr package and data manipulation, and introduce the pipe from the magrittr library.

Dplyr
-dplyr
{width=200}

Hex sticker of dplyr

On its website, the dplyr library is presented as “dplyr is a grammar of data manipulation, providing a consistent set of verbs that help you solve the most common data manipulation challenges.”

Another definition can be seen in this text by Carlos Gil Bellosta

The “set of verbs” is as follows:

mutate() adds new variables that are functions of existing variables
select() selects variables based on their names
filter() selects cases based on their values
summarise() reduces multiple values to a single summary
arrange() changes the order of the rows.
Being a third-party library, you need to install the library (done only once) and load it.

{r
Copy code
#| eval: false

install.packages("dplyr")
library(dplyr)
We will work with the starwars dataset.

{r
Copy code

starwars
Notice that our data frame has changed its name, it is now a tibble. Read this chapter from the book for a detailed explanation.

We inspect the data frame (yes, the tibble is still a data frame) with glimpse.

{r
Copy code

glimpse(starwars)
Before continuing, it is better to introduce the pipe from magrittr. We will start with a simple example where we want to calculate the logarithm of the square root of the sum of a sequence of 20 realizations of a uniform distribution.

The steps would be as follows:

Generate the sequence of 20 realizations of a uniform distribution runif(20)
Calculate the sum sum(runif(20)))
Get the square root sqrt(sum(runif(20)))
Apply the logarithm log(sqrt(sum(runif(20))))
{r
Copy code

set.seed(356)
log(sqrt(sum(runif(20))))
The function is somewhat complicated to read, and it becomes more complicated as we add more functions.

The pipe of R |> (the magrittr library has its version of the pipe %>%) follows the same idea as the bash pipe |, passing the output of one function to another function in a chained manner.

A “clean” way to execute multiple verbs sequentially is through the use of the pipe.

According to its website, this tool makes our code more readable for the following reasons:

structuring sequences of data operations from left to right (instead of from inside out)
avoiding nested function calls
minimizing the need for local variables and function definitions
making it easier to add steps at any point in the sequence of operations
The previous operation would look like this with pipes:

{r
Copy code

set.seed(356)

runif(20) |> 
  sum() |> 
  sqrt() |> 
  log()
Which is more natural and easier to read. We will apply this chaining of functions with the pipe intensively with dplyr.

We will select rows that meet a certain condition, this is done with the verb filter()

For example, we only keep the Star Wars characters who are from Tatooine.

{r
Copy code
starwars |> 
  dplyr::filter(homeworld == "Tatooine")
Or who live on Tatooine and are male.

{r
Copy code
starwars |>
  dplyr::filter(homeworld == "Tatooine" & gender == "masculine")
Or we want to keep those records that are not human.

{r
Copy code

starwars |> 
  dplyr::filter(species != "Human")
If we want to select columns, we use the verb select()

Continuing with the first example, we want to know which Star Wars characters are from Tatooine, but we only want to see the name column.

{r
Copy code

starwars |> 
  dplyr::filter(homeworld == "Tatooine") |>
  select(name)
In addition to the name, we want to know their height and species.

{r
Copy code

starwars |> 
  dplyr::filter(homeworld == "Tatooine") |>
  select(name, height, species)
Suppose we don't know in advance how many types of species there are, and we want to know to apply the appropriate filters. In base R, we would have to extract the column and use the unique() function (unique(starwars$species)). In dplyr we have the distinct() function.

{r
Copy code

starwars |> 
  select(species) |> 
  distinct()
If we want to count the number of records per species, we use the count() function.

{r
Copy code

starwars |> 
  count(species)
If we wish to display the information in descending order.

{r
Copy code

starwars |> 
  count(species, sort = TRUE)
If once the desired column is chosen, we want to sort it as in the previous case, we use the verb arrange(). In this case, we select the mass and name columns.

{r
Copy code

starwars |>
  select(name, mass) |>
  arrange(mass)
To sort it from highest to lowest, we use the desc() function within arrange().

{r
Copy code

starwars |>
  select(name, mass) |>
  arrange(desc(mass))
Suppose we want to select only the columns that meet a certain condition, this can be done with the where() function within the select() verb. For example, if we only want columns that contain numeric variables.

{r
Copy code

starwars |>
  select(where(is.numeric))
But, there are also more specific variants of select(). For this case, we could also have used select_if() and the condition.

{r
Copy code

starwars |>
  select_if(is.numeric)
There are several helper functions that allow for finer column selection. To take a look, run ?select

Something we often do very frequently is create new columns by transforming existing ones, we do this with the verb mutate().

{r
Copy code

starwars |> 
  mutate(H_W = height / mass)
It is possible to create several columns at the same time.

{r
Copy code

starwars |> 
  mutate(H_W = height / mass,
         fakeVar = sqrt(mass))
And to finish this brief overview of dplyr, we present two of the most used verbs in the data analysis cycle: group_by() and summarise().

For those familiar with SQL, the two previous verbs are equivalent to a GROUP BY and an aggregation operation.

For example, suppose we want to get the average height by gender.

{r
Copy code

starwars |> 
  group_by(gender) |> 
  summarise(average_height = mean(height, na.rm = TRUE))
Or the average weight by home planet.

{r
Copy code

starwars |> 
  group_by(homeworld) |> 
  summarise(average_weight = mean(mass, na.rm = TRUE))
Remember that we can sort it.

{r
Copy code

starwars |> 
  group_by(homeworld) |> 
  summarise(average_weight = mean(mass, na.rm = TRUE)) |> 
  arrange(desc(average_weight))
Number of records by planet sorted from highest to lowest.

{r
Copy code

starwars |> 
  group_by(homeworld) |> 
  summarise(records = n()) |> 
  arrange(desc(records))




# Estructura iterativa en R

Es común que tengamos que aplicar la misma operación un número de veces, donde este número es lo suficientemente grande como para que sea inviable, o al menos, incómoda.

Por lo general aplicaremos funciones en este esquema iterativo, o unas cuentas líneas de código que deseamos ejecutar varias veces.

La estructura iterativa básica es un buble (loop) que adopta la siguiente forma:


```{r loop1}
#| eval: false

for (variable in vector) {
  Ejecuta esta accion
  Ejecuta esta accion
  ...
  Ejecuta esta accion
}

```


Ejemplos

```{r loop2}

for (cyl in mtcars$cyl) {
  print(cyl)
}


```

```{r loop2_5}

contador <- 1

for (cyl in mtcars$cyl) {
  print(cyl)
  contador <- contador + 1
  if (contador >10){
    break
  }
}


```

```{r loop3}

mtcars_peque <- mtcars[1:20,]

for (i in seq_along(mtcars_peque$cyl)) {
  if (mtcars_peque$cyl[i] >= 8){
    mtcars_peque$cyl[i] <- "Grande"
  } else{
    mtcars_peque$cyl[i] <- "Pequeno"
  }
}

mtcars_peque

```


```{r loop4}

for (i in seq_along(mtcars_peque$cyl)) {
  if (mtcars_peque$cyl[i] >= 6) {
    mtcars_peque$cyl[i] <- "Grande"
  } else if (mtcars_peque$cyl[i] > 4 & mtcars_peque$cyl[i] < 6) {
    mtcars_peque$cyl[i] <- "Mediano"
  } else {
    mtcars_peque$cyl[i] <-"Pequeno"
  }
}

mtcars_peque

```
# Funciones

Ya hemos trabajado con varias funciones de R, tales como `length()`, `nrow()`, `summary()`

Pero en esta sección no nos concentramos en las distintas funciones que podemos llamar en R y sus librerías, que son miles, sino en como podemos definir nuestras propias funciones.

Es más que habitual en el flujo de trabajos con datos necesitemos repetir un tipo de operación no trivial (cuya realización implique el uso de un script de código) varias veces. En este caso, en lugar de copiar y pegar las instrucciones una y otra vez, podemos escribir una función que encapsule esas instrucciones y llamar a la misma cada vez que necesitemos realizar la operación.

Siguiendo este [consejo](https://es.r4ds.hadley.nz/19-functions.html#cu%C3%A1ndo-deber%C3%ADas-escribir-una-funci%C3%B3n), deberíamos convertir en una función cualquier bloque de código que hayamos copiado y pegado al menos 3 veces en nuestro flujo de trabajo

Veamos un ejemplo muy sencillo. deseamos escribir una función que normalice una variable que pertenece a un conjunto de datos, sustrayendo su media y dividiéndolo por su desviación típica.

Generamos unos datos aleatorios que sirvan de ejemplo

```{r fun01}

set.seed(154)
datos_1 <- rnorm(n = 100, mean = 50, sd = 15)

```

Seleccionamos uno al azar

```{r fun02}

dato_1 <- sample(x = datos_1, size = 1, replace = TRUE)

dato_1

```

Normalizamos la variable

```{r fun03}

normal_1 <- (dato_1 - mean(datos_1)) / sd(datos_1)

normal_1

```

Queremos volver a hacer esta operación con otro dato del conjunto

```{r fun04}

dato_2 <- sample(x = datos_1, size = 1, replace = TRUE)

dato_2

normal_2 <- (dato_2 - mean(datos_1)) / sd(datos_1)

normal_2


```

Y otra vez

```{r fun05}

dato_3 <- sample(x = datos_1, size = 1, replace = TRUE)

dato_3

normal_3 <- (dato_3 - mean(datos_1)) / sd(datos_1)

normal_3


```

Esto de copiar y pegar un trozo de código cada vez que necesitamos hacer una operación, no tiene sentido.

Para evitar eso definimos una *función personalizada* 

En R se definen funciones del siguiente modo:

```{r fun06}
#| eval: false

nombre_de_la_funcion <- function(argumentos) {
  
  Cuerpo de la funcion
}

```

Podemos identificar tres partes de la función:

* Nombre de la función

* Argumentos

* Cuerpo de la función

El nombre de la función debe ser informativo (ver estos [consejos](https://es.r4ds.hadley.nz/19-functions.html#las-funciones-son-para-los-seres-humanos-y-para-las-computadoras)).

EL cuerpo de la función es el código que deseamos re utilizar

Los argumentos son las variables (pueden ser de cualquier tipo: vectores, matrices, dtataframes, etc.) que necesita el cuerpo para poder ejecutar el código

Implementamos nuestro ejemplo

```{r fun07}

normalizar <- function(dato, datos) {
  
  (dato - mean(datos)) / sd(datos)
  
}

```

Una vez ejecutamos la instrucción anterior, la función está a nuestra disposición en el entorno de trabajo

Probemos con los valores utilizados antes

```{r fun08}

normalizar(dato = dato_1, datos = datos_1)

normalizar(dato = dato_2, datos = datos_1)

normalizar(dato = dato_2, datos = datos_1)

```

Por supuesto, podemos asignar el resultado de la función a una variable (objeto)

```{r fun09}

normal_1_2 <- normalizar(dato = dato_1, datos = datos_1)

normal_2_2 <- normalizar(dato = dato_2, datos = datos_1)

normal_3_2 <- normalizar(dato = dato_2, datos = datos_1)

normal_1_2
normal_2_2
normal_3_2

```

Podemos pasar un vector como argumento

```{r fun10}

datos_entrada <- c(dato_1, dato_2, dato_3)

normal_vec <- normalizar(dato = datos_entrada, datos = datos_1)

normal_vec

```

Y por ende, una columna de un data frame

```{r fun11}

datos_entrada_2 <- mtcars$mpg

normal_mpg <- normalizar(dato = datos_entrada_2, datos = datos_entrada_2)

normal_mpg

```

Escribir funciones es un mundo y un arte, a la función anterior por ejemplo habría que añadirle alguna prueba que verificara, por ejemplo, si los vectores de entrada son numéricos, como actuar en caso de que haya datos faltantes, imprimir errores informativos en caso de errores, posibilidad de llamar a otras funciones, etc.
